
/*
 * This file was generated by the SOM Compiler.
 * FileName: C:\Misc\WPSProgramming\XShadow\Source\XShadow.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    XSHADOW.IDL
 * 
 *  =====================================================================#
 *                                                                       #
 *   CLASS: XShadow                                                      #
 *                                                                       #
 *   CLASS HIERARCHY:                                                    #
 *                                                                       #
 *       SOMObject                                                       #
 *         ÀÄÄ WPObject                                                  #
 *               ÀÄÄ WPShadow                                            #
 *                     ÀÄÄ XShadow                                       #
 *                                                                       #
 *   DESCRIPTION:                                                        #
 *                                                                       #
 *   Instances of this class are Workplace Shell objects.                #
 *                                                                       #
 *  =====================================================================#
 */


#ifndef SOM_XShadow_xh
#define SOM_XShadow_xh

class XShadow;

#define XShadow_MajorVersion 1
#define XShadow_MinorVersion 3

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPShadow_xh
#include <wpshadow.xh>
#endif

#ifndef XShadow_API
#define XShadow_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPShadow;
class M_XShadow;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the XShadow Class */
class M_XShadow;
SOMEXTERN M_XShadow * SOMLINK XShadowNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the XShadow class object, and the methods it introduces. */
SOMEXTERN struct XShadowClassDataStructure {
	M_XShadow *classObject;
} SOMDLINK XShadowClassData;
#define _XShadow XShadowClassData.classObject

/* The API to parentMtabs for XShadow, and the instance data it introduces. */
SOMEXTERN struct XShadowCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK XShadowCClassData;

/*
 * -- Typedefs for XShadow Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPObject*   SOMLINK somTP_XShadow_wpQueryShadowedObject(XShadow *somSelf, 
		BOOL fLock);
typedef somTP_XShadow_wpQueryShadowedObject *somTD_XShadow_wpQueryShadowedObject;
typedef BOOL   SOMLINK somTP_XShadow_wpSetShadowTitle(XShadow *somSelf, 
		PSZ pszNewTitle);
typedef somTP_XShadow_wpSetShadowTitle *somTD_XShadow_wpSetShadowTitle;
typedef BOOL   SOMLINK somTP_XShadow_wpSetLinkToObject(XShadow *somSelf, 
		WPObject* FromObject);
typedef somTP_XShadow_wpSetLinkToObject *somTD_XShadow_wpSetLinkToObject;
typedef PSZ   SOMLINK somTP_XShadow_wpQueryTitle(XShadow *somSelf);
typedef somTP_XShadow_wpQueryTitle *somTD_XShadow_wpQueryTitle;
typedef BOOL   SOMLINK somTP_XShadow_wpSetup(XShadow *somSelf, 
		PSZ pszSetupString);
typedef somTP_XShadow_wpSetup *somTD_XShadow_wpSetup;
typedef BOOL   SOMLINK somTP_XShadow_wpSaveState(XShadow *somSelf);
typedef somTP_XShadow_wpSaveState *somTD_XShadow_wpSaveState;
typedef BOOL   SOMLINK somTP_XShadow_wpRestoreState(XShadow *somSelf, 
		ULONG ulReserved);
typedef somTP_XShadow_wpRestoreState *somTD_XShadow_wpRestoreState;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryStyle(XShadow *somSelf);
typedef somTP_XShadow_wpQueryStyle *somTD_XShadow_wpQueryStyle;
typedef void   SOMLINK somTP_XShadow_wpInitData(XShadow *somSelf);
typedef somTP_XShadow_wpInitData *somTD_XShadow_wpInitData;
typedef void   SOMLINK somTP_XShadow_wpUnInitData(XShadow *somSelf);
typedef somTP_XShadow_wpUnInitData *somTD_XShadow_wpUnInitData;
typedef BOOL   SOMLINK somTP_XShadow_wpSetTitle(XShadow *somSelf, 
		PSZ pszNewTitle);
typedef somTP_XShadow_wpSetTitle *somTD_XShadow_wpSetTitle;
typedef ULONG   SOMLINK somTP_XShadow_wpFilterPopupMenu(XShadow *somSelf, 
		ULONG ulFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect);
typedef somTP_XShadow_wpFilterPopupMenu *somTD_XShadow_wpFilterPopupMenu;
typedef BOOL   SOMLINK somTP_XShadow_wpModifyPopupMenu(XShadow *somSelf, 
		HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition);
typedef somTP_XShadow_wpModifyPopupMenu *somTD_XShadow_wpModifyPopupMenu;
typedef BOOL   SOMLINK somTP_XShadow_wpMenuItemSelected(XShadow *somSelf, 
		HWND hwndFrame, 
		ULONG ulMenuId);
typedef somTP_XShadow_wpMenuItemSelected *somTD_XShadow_wpMenuItemSelected;
typedef HWND   SOMLINK somTP_XShadow_wpViewObject(XShadow *somSelf, 
		HWND hwndCnr, 
		ULONG ulView, 
		ULONG param);
typedef somTP_XShadow_wpViewObject *somTD_XShadow_wpViewObject;
typedef BOOL   SOMLINK somTP_XShadow_wpMenuItemHelpSelected(XShadow *somSelf, 
		ULONG MenuId);
typedef somTP_XShadow_wpMenuItemHelpSelected *somTD_XShadow_wpMenuItemHelpSelected;
typedef WPObject*   SOMLINK somTP_XShadow_wpCreateFromTemplate(XShadow *somSelf, 
		WPFolder* folder, 
		BOOL fLock);
typedef somTP_XShadow_wpCreateFromTemplate *somTD_XShadow_wpCreateFromTemplate;
typedef HWND   SOMLINK somTP_XShadow_wpOpen(XShadow *somSelf, 
		HWND hwndCnr, 
		ULONG ulView, 
		ULONG param);
typedef somTP_XShadow_wpOpen *somTD_XShadow_wpOpen;
typedef BOOL   SOMLINK somTP_XShadow_wpInsertPopupMenuItems(XShadow *somSelf, 
		HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID);
typedef somTP_XShadow_wpInsertPopupMenuItems *somTD_XShadow_wpInsertPopupMenuItems;
typedef BOOL   SOMLINK somTP_XShadow_wpInsertMenuItems(XShadow *somSelf, 
		HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID);
typedef somTP_XShadow_wpInsertMenuItems *somTD_XShadow_wpInsertMenuItems;
typedef WPObject*   SOMLINK somTP_XShadow_wpCreateShadowObject(XShadow *somSelf, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_XShadow_wpCreateShadowObject *somTD_XShadow_wpCreateShadowObject;
typedef MRESULT   SOMLINK somTP_XShadow_wpDragOver(XShadow *somSelf, 
		HWND hwndCnr, 
		PDRAGINFO pdrgInfo);
typedef somTP_XShadow_wpDragOver *somTD_XShadow_wpDragOver;
typedef MRESULT   SOMLINK somTP_XShadow_wpDrop(XShadow *somSelf, 
		HWND hwndCnr, 
		PDRAGINFO pdrgInfo, 
		PDRAGITEM pdrgItem);
typedef somTP_XShadow_wpDrop *somTD_XShadow_wpDrop;
typedef BOOL   SOMLINK somTP_XShadow_wpQueryDefaultHelp(XShadow *somSelf, 
		PULONG pHelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_XShadow_wpQueryDefaultHelp *somTD_XShadow_wpQueryDefaultHelp;
typedef ULONG   SOMLINK somTP_XShadow_wpConfirmDelete(XShadow *somSelf, 
		ULONG fConfirmations);
typedef somTP_XShadow_wpConfirmDelete *somTD_XShadow_wpConfirmDelete;
typedef ULONG   SOMLINK somTP_XShadow_wpConfirmObjectTitle(XShadow *somSelf, 
		WPFolder* Folder, 
		WPObject** ppDuplicate, 
		PSZ pszTitle, 
		ULONG cbTitle, 
		ULONG menuID);
typedef somTP_XShadow_wpConfirmObjectTitle *somTD_XShadow_wpConfirmObjectTitle;
typedef BOOL   SOMLINK somTP_XShadow_wpPrintObject(XShadow *somSelf, 
		PPRINTDEST pPrintDest, 
		ULONG ulReserved);
typedef somTP_XShadow_wpPrintObject *somTD_XShadow_wpPrintObject;
typedef BOOL   SOMLINK somTP_XShadow_wpFormatDragItem(XShadow *somSelf, 
		PDRAGITEM pdrgItem);
typedef somTP_XShadow_wpFormatDragItem *somTD_XShadow_wpFormatDragItem;
typedef MRESULT   SOMLINK somTP_XShadow_wpDraggedOverObject(XShadow *somSelf, 
		WPObject* DraggedOverObject);
typedef somTP_XShadow_wpDraggedOverObject *somTD_XShadow_wpDraggedOverObject;
typedef BOOL   SOMLINK somTP_XShadow_wpDroppedOnObject(XShadow *somSelf, 
		WPObject* DroppedOnObject);
typedef somTP_XShadow_wpDroppedOnObject *somTD_XShadow_wpDroppedOnObject;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryNameClashOptions(XShadow *somSelf, 
		ULONG menuID);
typedef somTP_XShadow_wpQueryNameClashOptions *somTD_XShadow_wpQueryNameClashOptions;
typedef BOOL   SOMLINK somTP_XShadow_wpFilterMenu(XShadow *somSelf, 
		FILTERFLAGS* pFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved);
typedef somTP_XShadow_wpFilterMenu *somTD_XShadow_wpFilterMenu;
typedef BOOL   SOMLINK somTP_XShadow_wpModifyMenu(XShadow *somSelf, 
		HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved);
typedef somTP_XShadow_wpModifyMenu *somTD_XShadow_wpModifyMenu;
typedef void   SOMLINK somTP_XShadow_somDefaultInit(XShadow *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_XShadow_somDefaultInit *somTD_XShadow_somDefaultInit;
typedef void   SOMLINK somTP_XShadow_somDestruct(XShadow *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_XShadow_somDestruct *somTD_XShadow_somDestruct;
typedef HOBJECT   SOMLINK somTP_XShadow_wpQueryHandle(XShadow *somSelf);
typedef somTP_XShadow_wpQueryHandle *somTD_XShadow_wpQueryHandle;
typedef BOOL   SOMLINK somTP_XShadow_wpSaveImmediate(XShadow *somSelf);
typedef somTP_XShadow_wpSaveImmediate *somTD_XShadow_wpSaveImmediate;
typedef WPObject*   SOMLINK somTP_XShadow_wpCopyObject(XShadow *somSelf, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_XShadow_wpCopyObject *somTD_XShadow_wpCopyObject;
typedef BOOL   SOMLINK somTP_XShadow_wpMoveObject(XShadow *somSelf, 
		WPFolder* Folder);
typedef somTP_XShadow_wpMoveObject *somTD_XShadow_wpMoveObject;
typedef HPOINTER   SOMLINK somTP_XShadow_wpQueryIcon(XShadow *somSelf);
typedef somTP_XShadow_wpQueryIcon *somTD_XShadow_wpQueryIcon;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryIconData(XShadow *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_XShadow_wpQueryIconData *somTD_XShadow_wpQueryIconData;
typedef BOOL   SOMLINK somTP_XShadow_wpSetIconData(XShadow *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_XShadow_wpSetIconData *somTD_XShadow_wpSetIconData;
typedef BOOL32   SOMLINK somTP_XShadow_wpReplaceObject(XShadow *somSelf, 
		WPObject* targetObject, 
		BOOL32 fMove);
typedef somTP_XShadow_wpReplaceObject *somTD_XShadow_wpReplaceObject;
typedef BOOL   SOMLINK somTP_XShadow_wpIdentify(XShadow *somSelf, 
		PSZ pszIdentity);
typedef somTP_XShadow_wpIdentify *somTD_XShadow_wpIdentify;
typedef ULONG   SOMLINK somTP_XShadow_wpAddObjectGeneralPage(XShadow *somSelf, 
		HWND hwndNotebook);
typedef somTP_XShadow_wpAddObjectGeneralPage *somTD_XShadow_wpAddObjectGeneralPage;
typedef ULONG   SOMLINK somTP_XShadow_wpAddObjectGeneralPage2(XShadow *somSelf, 
		HWND hwndNotebook);
typedef somTP_XShadow_wpAddObjectGeneralPage2 *somTD_XShadow_wpAddObjectGeneralPage2;
typedef ULONG   SOMLINK somTP_XShadow_wpAddObjectWindowPage(XShadow *somSelf, 
		HWND hwndNotebook);
typedef somTP_XShadow_wpAddObjectWindowPage *somTD_XShadow_wpAddObjectWindowPage;
typedef BOOL   SOMLINK somTP_XShadow_wpAddSettingsPages(XShadow *somSelf, 
		HWND hwndNotebook);
typedef somTP_XShadow_wpAddSettingsPages *somTD_XShadow_wpAddSettingsPages;
typedef BOOL   SOMLINK somTP_XShadow_wpAddToObjUseList(XShadow *somSelf, 
		PUSEITEM pUseItem);
typedef somTP_XShadow_wpAddToObjUseList *somTD_XShadow_wpAddToObjUseList;
typedef PBYTE   SOMLINK somTP_XShadow_wpAllocMem(XShadow *somSelf, 
		ULONG cbBytes, 
		PULONG prc);
typedef somTP_XShadow_wpAllocMem *somTD_XShadow_wpAllocMem;
typedef BOOL32   SOMLINK somTP_XShadow_wpAppendObject(XShadow *somSelf, 
		WPObject* targetObject, 
		BOOL32 fMove);
typedef somTP_XShadow_wpAppendObject *somTD_XShadow_wpAppendObject;
typedef BOOL   SOMLINK somTP_XShadow_wpAssertObjectMutexSem(XShadow *somSelf);
typedef somTP_XShadow_wpAssertObjectMutexSem *somTD_XShadow_wpAssertObjectMutexSem;
typedef BOOL   SOMLINK somTP_XShadow_wpClose(XShadow *somSelf);
typedef somTP_XShadow_wpClose *somTD_XShadow_wpClose;
typedef PMINIRECORDCORE   SOMLINK somTP_XShadow_wpCnrInsertObject(XShadow *somSelf, 
		HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PMINIRECORDCORE preccParent, 
		PRECORDINSERT pRecInsert);
typedef somTP_XShadow_wpCnrInsertObject *somTD_XShadow_wpCnrInsertObject;
typedef BOOL   SOMLINK somTP_XShadow_wpCnrRemoveObject(XShadow *somSelf, 
		HWND hwndCnr);
typedef somTP_XShadow_wpCnrRemoveObject *somTD_XShadow_wpCnrRemoveObject;
typedef BOOL   SOMLINK somTP_XShadow_wpCnrSetEmphasis(XShadow *somSelf, 
		ULONG ulEmphasisAttr, 
		BOOL fTurnOn);
typedef somTP_XShadow_wpCnrSetEmphasis *somTD_XShadow_wpCnrSetEmphasis;
typedef void   SOMLINK somTP_XShadow_wpCopiedFromTemplate(XShadow *somSelf);
typedef somTP_XShadow_wpCopiedFromTemplate *somTD_XShadow_wpCopiedFromTemplate;
typedef WPObject*   SOMLINK somTP_XShadow_wpCreateAnother(XShadow *somSelf, 
		PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder);
typedef somTP_XShadow_wpCreateAnother *somTD_XShadow_wpCreateAnother;
typedef ULONG   SOMLINK somTP_XShadow_wpDelete(XShadow *somSelf, 
		ULONG fConfirmations);
typedef somTP_XShadow_wpDelete *somTD_XShadow_wpDelete;
typedef BOOL   SOMLINK somTP_XShadow_wpDeleteFromObjUseList(XShadow *somSelf, 
		PUSEITEM pUseItem);
typedef somTP_XShadow_wpDeleteFromObjUseList *somTD_XShadow_wpDeleteFromObjUseList;
typedef BOOL   SOMLINK somTP_XShadow_wpDisplayHelp(XShadow *somSelf, 
		ULONG HelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_XShadow_wpDisplayHelp *somTD_XShadow_wpDisplayHelp;
typedef HWND   SOMLINK somTP_XShadow_wpDisplayMenu(XShadow *somSelf, 
		HWND hwndOwner, 
		HWND hwndClient, 
		POINTL* ptlPopupPt, 
		ULONG ulMenuType, 
		ULONG ulReserved);
typedef somTP_XShadow_wpDisplayMenu *somTD_XShadow_wpDisplayMenu;
typedef BOOL   SOMLINK somTP_XShadow_wpDoesObjectMatch(XShadow *somSelf, 
		PVOID pvoidExtendedCriteria);
typedef somTP_XShadow_wpDoesObjectMatch *somTD_XShadow_wpDoesObjectMatch;
typedef MRESULT   SOMLINK somTP_XShadow_wpEndConversation(XShadow *somSelf, 
		ULONG ulItemID, 
		ULONG flResult);
typedef somTP_XShadow_wpEndConversation *somTD_XShadow_wpEndConversation;
typedef PUSEITEM   SOMLINK somTP_XShadow_wpFindUseItem(XShadow *somSelf, 
		ULONG type, 
		PUSEITEM pCurrentItem);
typedef somTP_XShadow_wpFindUseItem *somTD_XShadow_wpFindUseItem;
typedef BOOL   SOMLINK somTP_XShadow_wpFree(XShadow *somSelf);
typedef somTP_XShadow_wpFree *somTD_XShadow_wpFree;
typedef BOOL   SOMLINK somTP_XShadow_wpFreeMem(XShadow *somSelf, 
		PBYTE pByte);
typedef somTP_XShadow_wpFreeMem *somTD_XShadow_wpFreeMem;
typedef BOOL   SOMLINK somTP_XShadow_wpHide(XShadow *somSelf);
typedef somTP_XShadow_wpHide *somTD_XShadow_wpHide;
typedef ULONG   SOMLINK somTP_XShadow_wpInsertSettingsPage(XShadow *somSelf, 
		HWND hwndNotebook, 
		PPAGEINFO ppageinfo);
typedef somTP_XShadow_wpInsertSettingsPage *somTD_XShadow_wpInsertSettingsPage;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryConcurrentView(XShadow *somSelf);
typedef somTP_XShadow_wpQueryConcurrentView *somTD_XShadow_wpQueryConcurrentView;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryButtonAppearance(XShadow *somSelf);
typedef somTP_XShadow_wpQueryButtonAppearance *somTD_XShadow_wpQueryButtonAppearance;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryConfirmations(XShadow *somSelf);
typedef somTP_XShadow_wpQueryConfirmations *somTD_XShadow_wpQueryConfirmations;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryDefaultView(XShadow *somSelf);
typedef somTP_XShadow_wpQueryDefaultView *somTD_XShadow_wpQueryDefaultView;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryDetailsData(XShadow *somSelf, 
		PVOID* ppDetailsData, 
		PULONG pcp);
typedef somTP_XShadow_wpQueryDetailsData *somTD_XShadow_wpQueryDetailsData;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryError(XShadow *somSelf);
typedef somTP_XShadow_wpQueryError *somTD_XShadow_wpQueryError;
typedef BOOL   SOMLINK somTP_XShadow_wpSetFolder(XShadow *somSelf, 
		WPObject* container);
typedef somTP_XShadow_wpSetFolder *somTD_XShadow_wpSetFolder;
typedef WPObject*   SOMLINK somTP_XShadow_wpQueryFolder(XShadow *somSelf);
typedef somTP_XShadow_wpQueryFolder *somTD_XShadow_wpQueryFolder;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryMinWindow(XShadow *somSelf);
typedef somTP_XShadow_wpQueryMinWindow *somTD_XShadow_wpQueryMinWindow;
typedef BOOL32   SOMLINK somTP_XShadow_wpSetTaskRec(XShadow *somSelf, 
		PTASKREC pNew, 
		PTASKREC pOld);
typedef somTP_XShadow_wpSetTaskRec *somTD_XShadow_wpSetTaskRec;
typedef PTASKREC   SOMLINK somTP_XShadow_wpFindTaskRec(XShadow *somSelf);
typedef somTP_XShadow_wpFindTaskRec *somTD_XShadow_wpFindTaskRec;
typedef BOOL   SOMLINK somTP_XShadow_wpRegisterView(XShadow *somSelf, 
		HWND hwndFrame, 
		PSZ pszViewTitle);
typedef somTP_XShadow_wpRegisterView *somTD_XShadow_wpRegisterView;
typedef ULONG   SOMLINK somTP_XShadow_wpReleaseObjectMutexSem(XShadow *somSelf);
typedef somTP_XShadow_wpReleaseObjectMutexSem *somTD_XShadow_wpReleaseObjectMutexSem;
typedef MRESULT   SOMLINK somTP_XShadow_wpRender(XShadow *somSelf, 
		PDRAGTRANSFER pdxfer);
typedef somTP_XShadow_wpRender *somTD_XShadow_wpRender;
typedef MRESULT   SOMLINK somTP_XShadow_wpRenderComplete(XShadow *somSelf, 
		PDRAGTRANSFER pdxfer, 
		ULONG ulResult);
typedef somTP_XShadow_wpRenderComplete *somTD_XShadow_wpRenderComplete;
typedef ULONG   SOMLINK somTP_XShadow_wpRequestObjectMutexSem(XShadow *somSelf, 
		ULONG ulTimeout);
typedef somTP_XShadow_wpRequestObjectMutexSem *somTD_XShadow_wpRequestObjectMutexSem;
typedef BOOL   SOMLINK somTP_XShadow_wpRestore(XShadow *somSelf);
typedef somTP_XShadow_wpRestore *somTD_XShadow_wpRestore;
typedef BOOL   SOMLINK somTP_XShadow_wpRestoreData(XShadow *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		PULONG pcbValue);
typedef somTP_XShadow_wpRestoreData *somTD_XShadow_wpRestoreData;
typedef BOOL   SOMLINK somTP_XShadow_wpRestoreLong(XShadow *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PULONG pulValue);
typedef somTP_XShadow_wpRestoreLong *somTD_XShadow_wpRestoreLong;
typedef BOOL   SOMLINK somTP_XShadow_wpRestoreString(XShadow *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue, 
		PULONG pcbValue);
typedef somTP_XShadow_wpRestoreString *somTD_XShadow_wpRestoreString;
typedef BOOL   SOMLINK somTP_XShadow_wpSaveData(XShadow *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		ULONG cbValue);
typedef somTP_XShadow_wpSaveData *somTD_XShadow_wpSaveData;
typedef BOOL   SOMLINK somTP_XShadow_wpSaveDeferred(XShadow *somSelf);
typedef somTP_XShadow_wpSaveDeferred *somTD_XShadow_wpSaveDeferred;
typedef BOOL   SOMLINK somTP_XShadow_wpSaveLong(XShadow *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		ULONG ulValue);
typedef somTP_XShadow_wpSaveLong *somTD_XShadow_wpSaveLong;
typedef BOOL   SOMLINK somTP_XShadow_wpSaveString(XShadow *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue);
typedef somTP_XShadow_wpSaveString *somTD_XShadow_wpSaveString;
typedef BOOL   SOMLINK somTP_XShadow_wpScanSetupString(XShadow *somSelf, 
		PSZ pszSetupString, 
		PSZ pszKey, 
		PSZ pszValue, 
		PULONG pcbValue);
typedef somTP_XShadow_wpScanSetupString *somTD_XShadow_wpScanSetupString;
typedef void   SOMLINK somTP_XShadow_wpSetConcurrentView(XShadow *somSelf, 
		ULONG ulCCView);
typedef somTP_XShadow_wpSetConcurrentView *somTD_XShadow_wpSetConcurrentView;
typedef void   SOMLINK somTP_XShadow_wpSetButtonAppearance(XShadow *somSelf, 
		ULONG ulButtonType);
typedef somTP_XShadow_wpSetButtonAppearance *somTD_XShadow_wpSetButtonAppearance;
typedef BOOL   SOMLINK somTP_XShadow_wpSetDefaultHelp(XShadow *somSelf, 
		ULONG HelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_XShadow_wpSetDefaultHelp *somTD_XShadow_wpSetDefaultHelp;
typedef BOOL   SOMLINK somTP_XShadow_wpSetDefaultView(XShadow *somSelf, 
		ULONG ulView);
typedef somTP_XShadow_wpSetDefaultView *somTD_XShadow_wpSetDefaultView;
typedef BOOL   SOMLINK somTP_XShadow_wpSetError(XShadow *somSelf, 
		ULONG ulErrorId);
typedef somTP_XShadow_wpSetError *somTD_XShadow_wpSetError;
typedef SGID   SOMLINK somTP_XShadow_wpQueryScreenGroupID(XShadow *somSelf, 
		SGID sgidPrevSgId);
typedef somTP_XShadow_wpQueryScreenGroupID *somTD_XShadow_wpQueryScreenGroupID;
typedef BOOL   SOMLINK somTP_XShadow_wpSetupOnce(XShadow *somSelf, 
		PSZ pszSetupString);
typedef somTP_XShadow_wpSetupOnce *somTD_XShadow_wpSetupOnce;
typedef BOOL   SOMLINK somTP_XShadow_wpSetIcon(XShadow *somSelf, 
		HPOINTER hptrNewIcon);
typedef somTP_XShadow_wpSetIcon *somTD_XShadow_wpSetIcon;
typedef void   SOMLINK somTP_XShadow_wpSetMinWindow(XShadow *somSelf, 
		ULONG ulMinWindow);
typedef somTP_XShadow_wpSetMinWindow *somTD_XShadow_wpSetMinWindow;
typedef BOOL   SOMLINK somTP_XShadow_wpModifyStyle(XShadow *somSelf, 
		ULONG ulStyleFlags, 
		ULONG ulStyleMask);
typedef somTP_XShadow_wpModifyStyle *somTD_XShadow_wpModifyStyle;
typedef BOOL   SOMLINK somTP_XShadow_wpSwitchTo(XShadow *somSelf, 
		ULONG View);
typedef somTP_XShadow_wpSwitchTo *somTD_XShadow_wpSwitchTo;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryTrueStyle(XShadow *somSelf);
typedef somTP_XShadow_wpQueryTrueStyle *somTD_XShadow_wpQueryTrueStyle;
typedef BOOL   SOMLINK somTP_XShadow_wpUnlockObject(XShadow *somSelf);
typedef somTP_XShadow_wpUnlockObject *somTD_XShadow_wpUnlockObject;
typedef void   SOMLINK somTP_XShadow_wpObjectReady(XShadow *somSelf, 
		ULONG ulCode, 
		WPObject* refObject);
typedef somTP_XShadow_wpObjectReady *somTD_XShadow_wpObjectReady;
typedef BOOL   SOMLINK somTP_XShadow_wpIsObjectInitialized(XShadow *somSelf);
typedef somTP_XShadow_wpIsObjectInitialized *somTD_XShadow_wpIsObjectInitialized;
typedef WPObject*   SOMLINK somTP_XShadow_wpCreateShadowObjectExt(XShadow *somSelf, 
		WPFolder* Folder, 
		BOOL fLock, 
		PSZ pszSetup, 
		M_WPObject* shadowClass);
typedef somTP_XShadow_wpCreateShadowObjectExt *somTD_XShadow_wpCreateShadowObjectExt;
typedef BOOL   SOMLINK somTP_XShadow_wpCnrDeleteUseItem(XShadow *somSelf, 
		HWND hwndCnr);
typedef somTP_XShadow_wpCnrDeleteUseItem *somTD_XShadow_wpCnrDeleteUseItem;
typedef BOOL   SOMLINK somTP_XShadow_wpIsDeleteable(XShadow *somSelf);
typedef somTP_XShadow_wpIsDeleteable *somTD_XShadow_wpIsDeleteable;
typedef PMINIRECORDCORE   SOMLINK somTP_XShadow_wpQueryCoreRecord(XShadow *somSelf);
typedef somTP_XShadow_wpQueryCoreRecord *somTD_XShadow_wpQueryCoreRecord;
typedef BOOL   SOMLINK somTP_XShadow_wpSetObjectID(XShadow *somSelf, 
		PSZ pszObjectID);
typedef somTP_XShadow_wpSetObjectID *somTD_XShadow_wpSetObjectID;
typedef PSZ   SOMLINK somTP_XShadow_wpQueryObjectID(XShadow *somSelf);
typedef somTP_XShadow_wpQueryObjectID *somTD_XShadow_wpQueryObjectID;
typedef BOOL   SOMLINK somTP_XShadow_wpSetDefaultIconPos(XShadow *somSelf, 
		PPOINTL pPointl);
typedef somTP_XShadow_wpSetDefaultIconPos *somTD_XShadow_wpSetDefaultIconPos;
typedef BOOL   SOMLINK somTP_XShadow_wpQueryDefaultIconPos(XShadow *somSelf, 
		PPOINTL pPointl);
typedef somTP_XShadow_wpQueryDefaultIconPos *somTD_XShadow_wpQueryDefaultIconPos;
typedef void   SOMLINK somTP_XShadow_wpCnrRefreshDetails(XShadow *somSelf);
typedef somTP_XShadow_wpCnrRefreshDetails *somTD_XShadow_wpCnrRefreshDetails;
typedef PVIEWITEM   SOMLINK somTP_XShadow_wpFindViewItem(XShadow *somSelf, 
		ULONG flViews, 
		PVIEWITEM pCurrentItem);
typedef somTP_XShadow_wpFindViewItem *somTD_XShadow_wpFindViewItem;
typedef void   SOMLINK somTP_XShadow_wpLockObject(XShadow *somSelf);
typedef somTP_XShadow_wpLockObject *somTD_XShadow_wpLockObject;
typedef BOOL   SOMLINK somTP_XShadow_wpIsLocked(XShadow *somSelf);
typedef somTP_XShadow_wpIsLocked *somTD_XShadow_wpIsLocked;
typedef PULONG   SOMLINK somTP_XShadow_wpQueryContainerFlagPtr(XShadow *somSelf);
typedef somTP_XShadow_wpQueryContainerFlagPtr *somTD_XShadow_wpQueryContainerFlagPtr;
typedef ULONG   SOMLINK somTP_XShadow_wpWaitForClose(XShadow *somSelf, 
		LHANDLE lhView, 
		ULONG ulViews, 
		long lTimeOut, 
		BOOL bAutoClose);
typedef somTP_XShadow_wpWaitForClose *somTD_XShadow_wpWaitForClose;
typedef BOOL   SOMLINK somTP_XShadow_wpSetMenuStyle(XShadow *somSelf, 
		ULONG ulStyle);
typedef somTP_XShadow_wpSetMenuStyle *somTD_XShadow_wpSetMenuStyle;
typedef ULONG   SOMLINK somTP_XShadow_wpQueryMenuStyle(XShadow *somSelf);
typedef somTP_XShadow_wpQueryMenuStyle *somTD_XShadow_wpQueryMenuStyle;
typedef BOOL   SOMLINK somTP_XShadow_wpSetStyle(XShadow *somSelf, 
		ULONG ulNewStyle);
typedef somTP_XShadow_wpSetStyle *somTD_XShadow_wpSetStyle;
typedef void   SOMLINK somTP_XShadow_somInit(XShadow *somSelf);
typedef somTP_XShadow_somInit *somTD_XShadow_somInit;
typedef void   SOMLINK somTP_XShadow_somUninit(XShadow *somSelf);
typedef somTP_XShadow_somUninit *somTD_XShadow_somUninit;
typedef void   SOMLINK somTP_XShadow_somDefaultCopyInit(XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultCopyInit *somTD_XShadow_somDefaultCopyInit;
typedef XShadow*   SOMLINK somTP_XShadow_somDefaultAssign(XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultAssign *somTD_XShadow_somDefaultAssign;
typedef void   SOMLINK somTP_XShadow_somDefaultConstCopyInit(XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultConstCopyInit *somTD_XShadow_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_XShadow_somDefaultVCopyInit(XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultVCopyInit *somTD_XShadow_somDefaultVCopyInit;
typedef void   SOMLINK somTP_XShadow_somDefaultConstVCopyInit(XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultConstVCopyInit *somTD_XShadow_somDefaultConstVCopyInit;
typedef XShadow*   SOMLINK somTP_XShadow_somDefaultConstAssign(XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultConstAssign *somTD_XShadow_somDefaultConstAssign;
typedef XShadow*   SOMLINK somTP_XShadow_somDefaultVAssign(XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultVAssign *somTD_XShadow_somDefaultVAssign;
typedef XShadow*   SOMLINK somTP_XShadow_somDefaultConstVAssign(XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_XShadow_somDefaultConstVAssign *somTD_XShadow_somDefaultConstVAssign;
typedef void   SOMLINK somTP_XShadow_somFree(XShadow *somSelf);
typedef somTP_XShadow_somFree *somTD_XShadow_somFree;
typedef M_XShadow*   SOMLINK somTP_XShadow_somGetClass(XShadow *somSelf);
typedef somTP_XShadow_somGetClass *somTD_XShadow_somGetClass;
typedef string   SOMLINK somTP_XShadow_somGetClassName(XShadow *somSelf);
typedef somTP_XShadow_somGetClassName *somTD_XShadow_somGetClassName;
typedef long   SOMLINK somTP_XShadow_somGetSize(XShadow *somSelf);
typedef somTP_XShadow_somGetSize *somTD_XShadow_somGetSize;
typedef boolean   SOMLINK somTP_XShadow_somIsA(XShadow *somSelf, 
		SOMClass* aClassObj);
typedef somTP_XShadow_somIsA *somTD_XShadow_somIsA;
typedef boolean   SOMLINK somTP_XShadow_somIsInstanceOf(XShadow *somSelf, 
		SOMClass* aClassObj);
typedef somTP_XShadow_somIsInstanceOf *somTD_XShadow_somIsInstanceOf;
typedef boolean   SOMLINK somTP_XShadow_somRespondsTo(XShadow *somSelf, 
		somId mId);
typedef somTP_XShadow_somRespondsTo *somTD_XShadow_somRespondsTo;
typedef boolean   SOMLINK somTP_XShadow_somDispatch(XShadow *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_XShadow_somDispatch *somTD_XShadow_somDispatch;
typedef boolean   SOMLINK somTP_XShadow_somClassDispatch(XShadow *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_XShadow_somClassDispatch *somTD_XShadow_somClassDispatch;
typedef boolean   SOMLINK somTP_XShadow_somCastObj(XShadow *somSelf, 
		SOMClass* cls);
typedef somTP_XShadow_somCastObj *somTD_XShadow_somCastObj;
typedef boolean   SOMLINK somTP_XShadow_somResetObj(XShadow *somSelf);
typedef somTP_XShadow_somResetObj *somTD_XShadow_somResetObj;
typedef void   SOMLINK somTP_XShadow_somDispatchV(XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_XShadow_somDispatchV *somTD_XShadow_somDispatchV;
typedef long   SOMLINK somTP_XShadow_somDispatchL(XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_XShadow_somDispatchL *somTD_XShadow_somDispatchL;
typedef void*   SOMLINK somTP_XShadow_somDispatchA(XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_XShadow_somDispatchA *somTD_XShadow_somDispatchA;
typedef double   SOMLINK somTP_XShadow_somDispatchD(XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_XShadow_somDispatchD *somTD_XShadow_somDispatchD;
typedef SOMObject*   SOMLINK somTP_XShadow_somPrintSelf(XShadow *somSelf);
typedef somTP_XShadow_somPrintSelf *somTD_XShadow_somPrintSelf;
typedef void   SOMLINK somTP_XShadow_somDumpSelf(XShadow *somSelf, 
		long level);
typedef somTP_XShadow_somDumpSelf *somTD_XShadow_somDumpSelf;
typedef void   SOMLINK somTP_XShadow_somDumpSelfInt(XShadow *somSelf, 
		long level);
typedef somTP_XShadow_somDumpSelfInt *somTD_XShadow_somDumpSelfInt;
}

#endif /* XShadow_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for XShadow
 */
class XShadow : public WPShadow
{
public:

// XShadow::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_XShadow) XShadowNewClass(XShadow_MajorVersion,XShadow_MinorVersion);
   return (void*)
      SOM_Resolve(_XShadow,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_XShadow));
}

// XShadow::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

XShadow& operator=(XShadow& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

XShadow()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (XShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

XShadow(XShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (XShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
XShadow(const XShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (XShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: wpQueryShadowedObject */
WPObject*   wpQueryShadowedObject(BOOL fLock)
{
   return SOM_ResolveD(this,XShadow,WPShadow,wpQueryShadowedObject)
	(this,fLock);
}


/* method: wpSetShadowTitle */
BOOL   wpSetShadowTitle(PSZ pszNewTitle)
{
   return SOM_ResolveD(this,XShadow,WPShadow,wpSetShadowTitle)
	(this,pszNewTitle);
}


/* method: wpSetLinkToObject */
BOOL   wpSetLinkToObject(WPObject* FromObject)
{
   return SOM_ResolveD(this,XShadow,WPShadow,wpSetLinkToObject)
	(this,FromObject);
}


/* method: wpQueryTitle */
PSZ   wpQueryTitle()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryTitle)
	(this);
}


/* method: wpSetup */
BOOL   wpSetup(PSZ pszSetupString)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetup)
	(this,pszSetupString);
}


/* method: wpSaveState */
BOOL   wpSaveState()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSaveState)
	(this);
}


/* method: wpRestoreState */
BOOL   wpRestoreState(ULONG ulReserved)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRestoreState)
	(this,ulReserved);
}


/* method: wpQueryStyle */
ULONG   wpQueryStyle()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryStyle)
	(this);
}


/* method: wpInitData */
void   wpInitData()
{
   SOM_ResolveD(this,XShadow,WPObject,wpInitData)
	(this);
}


/* method: wpUnInitData */
void   wpUnInitData()
{
   SOM_ResolveD(this,XShadow,WPObject,wpUnInitData)
	(this);
}


/* method: wpSetTitle */
BOOL   wpSetTitle(PSZ pszNewTitle)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetTitle)
	(this,pszNewTitle);
}


/* method: wpFilterPopupMenu */
ULONG   wpFilterPopupMenu(ULONG ulFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFilterPopupMenu)
	(this,ulFlags,hwndCnr,fMultiSelect);
}


/* method: wpModifyPopupMenu */
BOOL   wpModifyPopupMenu(HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpModifyPopupMenu)
	(this,hwndMenu,hwndCnr,iPosition);
}


/* method: wpMenuItemSelected */
BOOL   wpMenuItemSelected(HWND hwndFrame, 
		ULONG ulMenuId)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpMenuItemSelected)
	(this,hwndFrame,ulMenuId);
}


/* method: wpViewObject */
HWND   wpViewObject(HWND hwndCnr, 
		ULONG ulView, 
		ULONG param)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpViewObject)
	(this,hwndCnr,ulView,param);
}


/* method: wpMenuItemHelpSelected */
BOOL   wpMenuItemHelpSelected(ULONG MenuId)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpMenuItemHelpSelected)
	(this,MenuId);
}


/* method: wpCreateFromTemplate */
WPObject*   wpCreateFromTemplate(WPFolder* folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCreateFromTemplate)
	(this,folder,fLock);
}


/* method: wpOpen */
HWND   wpOpen(HWND hwndCnr, 
		ULONG ulView, 
		ULONG param)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpOpen)
	(this,hwndCnr,ulView,param);
}


/* method: wpInsertPopupMenuItems */
BOOL   wpInsertPopupMenuItems(HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpInsertPopupMenuItems)
	(this,hwndMenu,iPosition,hmod,MenuID,SubMenuID);
}


/* method: wpInsertMenuItems */
BOOL   wpInsertMenuItems(HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpInsertMenuItems)
	(this,hwndMenu,iPosition,hmod,MenuID,SubMenuID);
}


/* method: wpCreateShadowObject */
WPObject*   wpCreateShadowObject(WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCreateShadowObject)
	(this,Folder,fLock);
}


/* method: wpDragOver */
MRESULT   wpDragOver(HWND hwndCnr, 
		PDRAGINFO pdrgInfo)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDragOver)
	(this,hwndCnr,pdrgInfo);
}


/* method: wpDrop */
MRESULT   wpDrop(HWND hwndCnr, 
		PDRAGINFO pdrgInfo, 
		PDRAGITEM pdrgItem)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDrop)
	(this,hwndCnr,pdrgInfo,pdrgItem);
}


/* method: wpQueryDefaultHelp */
BOOL   wpQueryDefaultHelp(PULONG pHelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryDefaultHelp)
	(this,pHelpPanelId,HelpLibrary);
}


/* method: wpConfirmDelete */
ULONG   wpConfirmDelete(ULONG fConfirmations)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpConfirmDelete)
	(this,fConfirmations);
}


/* method: wpConfirmObjectTitle */
ULONG   wpConfirmObjectTitle(WPFolder* Folder, 
		WPObject** ppDuplicate, 
		PSZ pszTitle, 
		ULONG cbTitle, 
		ULONG menuID)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpConfirmObjectTitle)
	(this,Folder,ppDuplicate,pszTitle,cbTitle,menuID);
}


/* method: wpPrintObject */
BOOL   wpPrintObject(PPRINTDEST pPrintDest, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpPrintObject)
	(this,pPrintDest,ulReserved);
}


/* method: wpFormatDragItem */
BOOL   wpFormatDragItem(PDRAGITEM pdrgItem)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFormatDragItem)
	(this,pdrgItem);
}


/* method: wpDraggedOverObject */
MRESULT   wpDraggedOverObject(WPObject* DraggedOverObject)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDraggedOverObject)
	(this,DraggedOverObject);
}


/* method: wpDroppedOnObject */
BOOL   wpDroppedOnObject(WPObject* DroppedOnObject)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDroppedOnObject)
	(this,DroppedOnObject);
}


/* method: wpQueryNameClashOptions */
ULONG   wpQueryNameClashOptions(ULONG menuID)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryNameClashOptions)
	(this,menuID);
}


/* method: wpFilterMenu */
BOOL   wpFilterMenu(FILTERFLAGS* pFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFilterMenu)
	(this,pFlags,hwndCnr,fMultiSelect,ulMenuType,ulView,ulReserved);
}


/* method: wpModifyMenu */
BOOL   wpModifyMenu(HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpModifyMenu)
	(this,hwndMenu,hwndCnr,iPosition,ulMenuType,ulView,ulReserved);
}


/* method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,XShadow,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,XShadow,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: wpQueryHandle */
HOBJECT   wpQueryHandle()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryHandle)
	(this);
}


/* method: wpSaveImmediate */
BOOL   wpSaveImmediate()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSaveImmediate)
	(this);
}


/* method: wpCopyObject */
WPObject*   wpCopyObject(WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCopyObject)
	(this,Folder,fLock);
}


/* method: wpMoveObject */
BOOL   wpMoveObject(WPFolder* Folder)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpMoveObject)
	(this,Folder);
}


/* method: wpQueryIcon */
HPOINTER   wpQueryIcon()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryIcon)
	(this);
}


/* method: wpQueryIconData */
ULONG   wpQueryIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryIconData)
	(this,pIconInfo);
}


/* method: wpSetIconData */
BOOL   wpSetIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetIconData)
	(this,pIconInfo);
}


/* method: wpReplaceObject */
BOOL32   wpReplaceObject(WPObject* targetObject, 
		BOOL32 fMove)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpReplaceObject)
	(this,targetObject,fMove);
}


/* method: wpIdentify */
BOOL   wpIdentify(PSZ pszIdentity)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpIdentify)
	(this,pszIdentity);
}


/* method: wpAddObjectGeneralPage */
ULONG   wpAddObjectGeneralPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAddObjectGeneralPage)
	(this,hwndNotebook);
}


/* method: wpAddObjectGeneralPage2 */
ULONG   wpAddObjectGeneralPage2(HWND hwndNotebook)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAddObjectGeneralPage2)
	(this,hwndNotebook);
}


/* method: wpAddObjectWindowPage */
ULONG   wpAddObjectWindowPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAddObjectWindowPage)
	(this,hwndNotebook);
}


/* method: wpAddSettingsPages */
BOOL   wpAddSettingsPages(HWND hwndNotebook)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAddSettingsPages)
	(this,hwndNotebook);
}


/* method: wpAddToObjUseList */
BOOL   wpAddToObjUseList(PUSEITEM pUseItem)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAddToObjUseList)
	(this,pUseItem);
}


/* method: wpAllocMem */
PBYTE   wpAllocMem(ULONG cbBytes, 
		PULONG prc)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAllocMem)
	(this,cbBytes,prc);
}


/* method: wpAppendObject */
BOOL32   wpAppendObject(WPObject* targetObject, 
		BOOL32 fMove)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAppendObject)
	(this,targetObject,fMove);
}


/* method: wpAssertObjectMutexSem */
BOOL   wpAssertObjectMutexSem()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpAssertObjectMutexSem)
	(this);
}


/* method: wpClose */
BOOL   wpClose()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpClose)
	(this);
}


/* method: wpCnrInsertObject */
PMINIRECORDCORE   wpCnrInsertObject(HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PMINIRECORDCORE preccParent, 
		PRECORDINSERT pRecInsert)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCnrInsertObject)
	(this,hwndCnr,pptlIcon,preccParent,pRecInsert);
}


/* method: wpCnrRemoveObject */
BOOL   wpCnrRemoveObject(HWND hwndCnr)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCnrRemoveObject)
	(this,hwndCnr);
}


/* method: wpCnrSetEmphasis */
BOOL   wpCnrSetEmphasis(ULONG ulEmphasisAttr, 
		BOOL fTurnOn)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCnrSetEmphasis)
	(this,ulEmphasisAttr,fTurnOn);
}


/* method: wpCopiedFromTemplate */
void   wpCopiedFromTemplate()
{
   SOM_ResolveD(this,XShadow,WPObject,wpCopiedFromTemplate)
	(this);
}


/* method: wpCreateAnother */
WPObject*   wpCreateAnother(PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCreateAnother)
	(this,pszTitle,pszSetupEnv,Folder);
}


/* method: wpDelete */
ULONG   wpDelete(ULONG fConfirmations)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDelete)
	(this,fConfirmations);
}


/* method: wpDeleteFromObjUseList */
BOOL   wpDeleteFromObjUseList(PUSEITEM pUseItem)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDeleteFromObjUseList)
	(this,pUseItem);
}


/* method: wpDisplayHelp */
BOOL   wpDisplayHelp(ULONG HelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDisplayHelp)
	(this,HelpPanelId,HelpLibrary);
}


/* method: wpDisplayMenu */
HWND   wpDisplayMenu(HWND hwndOwner, 
		HWND hwndClient, 
		POINTL* ptlPopupPt, 
		ULONG ulMenuType, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDisplayMenu)
	(this,hwndOwner,hwndClient,ptlPopupPt,ulMenuType,ulReserved);
}


/* method: wpDoesObjectMatch */
BOOL   wpDoesObjectMatch(PVOID pvoidExtendedCriteria)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpDoesObjectMatch)
	(this,pvoidExtendedCriteria);
}


/* method: wpEndConversation */
MRESULT   wpEndConversation(ULONG ulItemID, 
		ULONG flResult)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpEndConversation)
	(this,ulItemID,flResult);
}


/* method: wpFindUseItem */
PUSEITEM   wpFindUseItem(ULONG type, 
		PUSEITEM pCurrentItem)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFindUseItem)
	(this,type,pCurrentItem);
}


/* method: wpFree */
BOOL   wpFree()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFree)
	(this);
}


/* method: wpFreeMem */
BOOL   wpFreeMem(PBYTE pByte)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFreeMem)
	(this,pByte);
}


/* method: wpHide */
BOOL   wpHide()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpHide)
	(this);
}


/* method: wpInsertSettingsPage */
ULONG   wpInsertSettingsPage(HWND hwndNotebook, 
		PPAGEINFO ppageinfo)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpInsertSettingsPage)
	(this,hwndNotebook,ppageinfo);
}


/* method: wpQueryConcurrentView */
ULONG   wpQueryConcurrentView()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryConcurrentView)
	(this);
}


/* method: wpQueryButtonAppearance */
ULONG   wpQueryButtonAppearance()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryButtonAppearance)
	(this);
}


/* method: wpQueryConfirmations */
ULONG   wpQueryConfirmations()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryConfirmations)
	(this);
}


/* method: wpQueryDefaultView */
ULONG   wpQueryDefaultView()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryDefaultView)
	(this);
}


/* method: wpQueryDetailsData */
ULONG   wpQueryDetailsData(PVOID* ppDetailsData, 
		PULONG pcp)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryDetailsData)
	(this,ppDetailsData,pcp);
}


/* method: wpQueryError */
ULONG   wpQueryError()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryError)
	(this);
}


/* method: wpSetFolder */
BOOL   wpSetFolder(WPObject* container)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetFolder)
	(this,container);
}


/* method: wpQueryFolder */
WPObject*   wpQueryFolder()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryFolder)
	(this);
}


/* method: wpQueryMinWindow */
ULONG   wpQueryMinWindow()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryMinWindow)
	(this);
}


/* method: wpSetTaskRec */
BOOL32   wpSetTaskRec(PTASKREC pNew, 
		PTASKREC pOld)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetTaskRec)
	(this,pNew,pOld);
}


/* method: wpFindTaskRec */
PTASKREC   wpFindTaskRec()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFindTaskRec)
	(this);
}


/* method: wpRegisterView */
BOOL   wpRegisterView(HWND hwndFrame, 
		PSZ pszViewTitle)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRegisterView)
	(this,hwndFrame,pszViewTitle);
}


/* method: wpReleaseObjectMutexSem */
ULONG   wpReleaseObjectMutexSem()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpReleaseObjectMutexSem)
	(this);
}


/* method: wpRender */
MRESULT   wpRender(PDRAGTRANSFER pdxfer)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRender)
	(this,pdxfer);
}


/* method: wpRenderComplete */
MRESULT   wpRenderComplete(PDRAGTRANSFER pdxfer, 
		ULONG ulResult)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRenderComplete)
	(this,pdxfer,ulResult);
}


/* method: wpRequestObjectMutexSem */
ULONG   wpRequestObjectMutexSem(ULONG ulTimeout)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRequestObjectMutexSem)
	(this,ulTimeout);
}


/* method: wpRestore */
BOOL   wpRestore()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRestore)
	(this);
}


/* method: wpRestoreData */
BOOL   wpRestoreData(PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRestoreData)
	(this,pszClass,ulKey,pValue,pcbValue);
}


/* method: wpRestoreLong */
BOOL   wpRestoreLong(PSZ pszClass, 
		ULONG ulKey, 
		PULONG pulValue)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRestoreLong)
	(this,pszClass,ulKey,pulValue);
}


/* method: wpRestoreString */
BOOL   wpRestoreString(PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpRestoreString)
	(this,pszClass,ulKey,pszValue,pcbValue);
}


/* method: wpSaveData */
BOOL   wpSaveData(PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		ULONG cbValue)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSaveData)
	(this,pszClass,ulKey,pValue,cbValue);
}


/* method: wpSaveDeferred */
BOOL   wpSaveDeferred()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSaveDeferred)
	(this);
}


/* method: wpSaveLong */
BOOL   wpSaveLong(PSZ pszClass, 
		ULONG ulKey, 
		ULONG ulValue)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSaveLong)
	(this,pszClass,ulKey,ulValue);
}


/* method: wpSaveString */
BOOL   wpSaveString(PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSaveString)
	(this,pszClass,ulKey,pszValue);
}


/* method: wpScanSetupString */
BOOL   wpScanSetupString(PSZ pszSetupString, 
		PSZ pszKey, 
		PSZ pszValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpScanSetupString)
	(this,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: wpSetConcurrentView */
void   wpSetConcurrentView(ULONG ulCCView)
{
   SOM_ResolveD(this,XShadow,WPObject,wpSetConcurrentView)
	(this,ulCCView);
}


/* method: wpSetButtonAppearance */
void   wpSetButtonAppearance(ULONG ulButtonType)
{
   SOM_ResolveD(this,XShadow,WPObject,wpSetButtonAppearance)
	(this,ulButtonType);
}


/* method: wpSetDefaultHelp */
BOOL   wpSetDefaultHelp(ULONG HelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetDefaultHelp)
	(this,HelpPanelId,HelpLibrary);
}


/* method: wpSetDefaultView */
BOOL   wpSetDefaultView(ULONG ulView)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetDefaultView)
	(this,ulView);
}


/* method: wpSetError */
BOOL   wpSetError(ULONG ulErrorId)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetError)
	(this,ulErrorId);
}


/* method: wpQueryScreenGroupID */
SGID   wpQueryScreenGroupID(SGID sgidPrevSgId)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryScreenGroupID)
	(this,sgidPrevSgId);
}


/* method: wpSetupOnce */
BOOL   wpSetupOnce(PSZ pszSetupString)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetupOnce)
	(this,pszSetupString);
}


/* method: wpSetIcon */
BOOL   wpSetIcon(HPOINTER hptrNewIcon)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetIcon)
	(this,hptrNewIcon);
}


/* method: wpSetMinWindow */
void   wpSetMinWindow(ULONG ulMinWindow)
{
   SOM_ResolveD(this,XShadow,WPObject,wpSetMinWindow)
	(this,ulMinWindow);
}


/* method: wpModifyStyle */
BOOL   wpModifyStyle(ULONG ulStyleFlags, 
		ULONG ulStyleMask)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpModifyStyle)
	(this,ulStyleFlags,ulStyleMask);
}


/* method: wpSwitchTo */
BOOL   wpSwitchTo(ULONG View)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSwitchTo)
	(this,View);
}


/* procedure: wpQueryTrueStyle */
static ULONG   wpQueryTrueStyle(XShadow *somSelf)
{
   return ((somTD_XShadow_wpQueryTrueStyle)WPObjectClassData.wpQueryTrueStyle)
	(somSelf);
}


/* method: wpUnlockObject */
BOOL   wpUnlockObject()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpUnlockObject)
	(this);
}


/* method: wpObjectReady */
void   wpObjectReady(ULONG ulCode, 
		WPObject* refObject)
{
   SOM_ResolveD(this,XShadow,WPObject,wpObjectReady)
	(this,ulCode,refObject);
}


/* method: wpIsObjectInitialized */
BOOL   wpIsObjectInitialized()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpIsObjectInitialized)
	(this);
}


/* method: wpCreateShadowObjectExt */
WPObject*   wpCreateShadowObjectExt(WPFolder* Folder, 
		BOOL fLock, 
		PSZ pszSetup, 
		M_WPObject* shadowClass)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCreateShadowObjectExt)
	(this,Folder,fLock,pszSetup,shadowClass);
}


/* method: wpCnrDeleteUseItem */
BOOL   wpCnrDeleteUseItem(HWND hwndCnr)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpCnrDeleteUseItem)
	(this,hwndCnr);
}


/* method: wpIsDeleteable */
BOOL   wpIsDeleteable()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpIsDeleteable)
	(this);
}


/* method: wpQueryCoreRecord */
PMINIRECORDCORE   wpQueryCoreRecord()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryCoreRecord)
	(this);
}


/* method: wpSetObjectID */
BOOL   wpSetObjectID(PSZ pszObjectID)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetObjectID)
	(this,pszObjectID);
}


/* method: wpQueryObjectID */
PSZ   wpQueryObjectID()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryObjectID)
	(this);
}


/* method: wpSetDefaultIconPos */
BOOL   wpSetDefaultIconPos(PPOINTL pPointl)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetDefaultIconPos)
	(this,pPointl);
}


/* method: wpQueryDefaultIconPos */
BOOL   wpQueryDefaultIconPos(PPOINTL pPointl)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryDefaultIconPos)
	(this,pPointl);
}


/* method: wpCnrRefreshDetails */
void   wpCnrRefreshDetails()
{
   SOM_ResolveD(this,XShadow,WPObject,wpCnrRefreshDetails)
	(this);
}


/* method: wpFindViewItem */
PVIEWITEM   wpFindViewItem(ULONG flViews, 
		PVIEWITEM pCurrentItem)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpFindViewItem)
	(this,flViews,pCurrentItem);
}


/* method: wpLockObject */
void   wpLockObject()
{
   SOM_ResolveD(this,XShadow,WPObject,wpLockObject)
	(this);
}


/* method: wpIsLocked */
BOOL   wpIsLocked()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpIsLocked)
	(this);
}


/* method: wpQueryContainerFlagPtr */
PULONG   wpQueryContainerFlagPtr()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryContainerFlagPtr)
	(this);
}


/* method: wpWaitForClose */
ULONG   wpWaitForClose(LHANDLE lhView, 
		ULONG ulViews, 
		long lTimeOut, 
		BOOL bAutoClose)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpWaitForClose)
	(this,lhView,ulViews,lTimeOut,bAutoClose);
}


/* method: wpSetMenuStyle */
BOOL   wpSetMenuStyle(ULONG ulStyle)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetMenuStyle)
	(this,ulStyle);
}


/* method: wpQueryMenuStyle */
ULONG   wpQueryMenuStyle()
{
   return SOM_ResolveD(this,XShadow,WPObject,wpQueryMenuStyle)
	(this);
}


/* method: wpSetStyle */
BOOL   wpSetStyle(ULONG ulNewStyle)
{
   return SOM_ResolveD(this,XShadow,WPObject,wpSetStyle)
	(this,ulNewStyle);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,XShadow,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,XShadow,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,XShadow,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
XShadow*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,XShadow,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,XShadow,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,XShadow,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
XShadow*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
XShadow*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
XShadow*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,XShadow,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
M_XShadow*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   XShadow_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,XShadow,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,XShadow,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   XShadow_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,XShadow,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,XShadow,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   XShadow_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,XShadow,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,XShadow,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   XShadow_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,XShadow,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,XShadow,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   XShadow_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,XShadow,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,XShadow,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   XShadow_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,XShadow,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,XShadow,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,XShadow,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,XShadow,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,XShadow,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* XShadow */



#endif       /* SOM_XShadow_xh */

#ifndef SOM_M_XShadow_xh
#define SOM_M_XShadow_xh

class M_XShadow;

/*
 *  New Class methods
 */

#define M_XShadow_MajorVersion 1
#define M_XShadow_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPShadow_xh
#include <wpshadow.xh>
#endif

#ifndef M_XShadow_API
#define M_XShadow_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_XShadow is a metaclass for XShadow. Make sure XShadow is known.
 */
class XShadow;


/* A procedure to create the M_XShadow Class */
SOMEXTERN SOMClass * SOMLINK M_XShadowNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_XShadow class object, and the methods it introduces. */
SOMEXTERN struct M_XShadowClassDataStructure {
	SOMClass *classObject;
	somMToken clsGetResourceModule;
	somMToken getHelpPath;
} SOMDLINK M_XShadowClassData;
#define _M_XShadow M_XShadowClassData.classObject

/* The API to parentMtabs for M_XShadow, and the instance data it introduces. */
SOMEXTERN struct M_XShadowCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_XShadowCClassData;

/*
 * -- Typedefs for M_XShadow Method Procedures
 */
SOMEXTERN {
typedef HMODULE   SOMLINK somTP_M_XShadow_clsGetResourceModule(M_XShadow *somSelf);
typedef somTP_M_XShadow_clsGetResourceModule *somTD_M_XShadow_clsGetResourceModule;
typedef PSZ   SOMLINK somTP_M_XShadow_getHelpPath(M_XShadow *somSelf);
typedef somTP_M_XShadow_getHelpPath *somTD_M_XShadow_getHelpPath;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef PSZ   SOMLINK somTP_M_XShadow_wpclsQueryTitle(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsQueryTitle *somTD_M_XShadow_wpclsQueryTitle;
typedef ULONG   SOMLINK somTP_M_XShadow_wpclsQueryStyle(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsQueryStyle *somTD_M_XShadow_wpclsQueryStyle;
typedef ULONG   SOMLINK somTP_M_XShadow_wpclsQueryIconData(M_XShadow *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_M_XShadow_wpclsQueryIconData *somTD_M_XShadow_wpclsQueryIconData;
typedef ULONG   SOMLINK somTP_M_XShadow_wpclsQuerySetting(M_XShadow *somSelf, 
		PSZ pszSetting, 
		PVOID pValue, 
		ULONG ulValueLen);
typedef somTP_M_XShadow_wpclsQuerySetting *somTD_M_XShadow_wpclsQuerySetting;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsSetSetting(M_XShadow *somSelf, 
		PSZ pszSetting, 
		PVOID pValue);
typedef somTP_M_XShadow_wpclsSetSetting *somTD_M_XShadow_wpclsSetSetting;
typedef WPObject*   SOMLINK somTP_M_XShadow_wpclsObjectFromHandle(M_XShadow *somSelf, 
		HOBJECT hObject);
typedef somTP_M_XShadow_wpclsObjectFromHandle *somTD_M_XShadow_wpclsObjectFromHandle;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsCreateDefaultTemplates(M_XShadow *somSelf, 
		WPObject* Folder);
typedef somTP_M_XShadow_wpclsCreateDefaultTemplates *somTD_M_XShadow_wpclsCreateDefaultTemplates;
typedef void   SOMLINK somTP_M_XShadow_wpclsInitData(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsInitData *somTD_M_XShadow_wpclsInitData;
typedef WPObject*   SOMLINK somTP_M_XShadow_wpclsMakeAwake(M_XShadow *somSelf, 
		PSZ pszTitle, 
		ULONG ulStyle, 
		HPOINTER hptrIcon, 
		POBJDATA pObjData, 
		WPFolder* Folder, 
		ULONG ulUser);
typedef somTP_M_XShadow_wpclsMakeAwake *somTD_M_XShadow_wpclsMakeAwake;
typedef WPObject*   SOMLINK somTP_M_XShadow_wpclsNew(M_XShadow *somSelf, 
		PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_M_XShadow_wpclsNew *somTD_M_XShadow_wpclsNew;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsQueryDefaultHelp(M_XShadow *somSelf, 
		PULONG pHelpPanelId, 
		PSZ pszHelpLibrary);
typedef somTP_M_XShadow_wpclsQueryDefaultHelp *somTD_M_XShadow_wpclsQueryDefaultHelp;
typedef ULONG   SOMLINK somTP_M_XShadow_wpclsQueryDefaultView(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsQueryDefaultView *somTD_M_XShadow_wpclsQueryDefaultView;
typedef PCLASSDETAILS   SOMLINK somTP_M_XShadow_wpclsQueryDetails(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsQueryDetails *somTD_M_XShadow_wpclsQueryDetails;
typedef ULONG   SOMLINK somTP_M_XShadow_wpclsQueryDetailsInfo(M_XShadow *somSelf, 
		PCLASSFIELDINFO* ppClassFieldInfo, 
		PULONG pSize);
typedef somTP_M_XShadow_wpclsQueryDetailsInfo *somTD_M_XShadow_wpclsQueryDetailsInfo;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsQueryExtendedCriteria(M_XShadow *somSelf, 
		PSZ pszName, 
		ULONG ulSearchType, 
		PVOID pvoidExtendedCriteria);
typedef somTP_M_XShadow_wpclsQueryExtendedCriteria *somTD_M_XShadow_wpclsQueryExtendedCriteria;
typedef WPObject*   SOMLINK somTP_M_XShadow_wpclsQueryFolder(M_XShadow *somSelf, 
		PSZ pszLocation, 
		BOOL fLock);
typedef somTP_M_XShadow_wpclsQueryFolder *somTD_M_XShadow_wpclsQueryFolder;
typedef HPOINTER   SOMLINK somTP_M_XShadow_wpclsQueryIcon(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsQueryIcon *somTD_M_XShadow_wpclsQueryIcon;
typedef void   SOMLINK somTP_M_XShadow_wpclsQuerySearchInfo(M_XShadow *somSelf, 
		M_WPObject** ClassExtended, 
		M_WPObject** ClassCreate, 
		PULONG pulClassCriteriaSize);
typedef somTP_M_XShadow_wpclsQuerySearchInfo *somTD_M_XShadow_wpclsQuerySearchInfo;
typedef void   SOMLINK somTP_M_XShadow_wpclsUnInitData(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsUnInitData *somTD_M_XShadow_wpclsUnInitData;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsFindObjectFirst(M_XShadow *somSelf, 
		PCLASS pClassList, 
		PHFIND phFind, 
		PSZ pszTitle, 
		WPFolder* Folder, 
		BOOL fSubfolders, 
		PVOID pExtendedCriteria, 
		POBJECT pBuffer, 
		PULONG pCount);
typedef somTP_M_XShadow_wpclsFindObjectFirst *somTD_M_XShadow_wpclsFindObjectFirst;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsFindObjectNext(M_XShadow *somSelf, 
		HFIND hFind, 
		POBJECT pBuffer, 
		PULONG pCount);
typedef somTP_M_XShadow_wpclsFindObjectNext *somTD_M_XShadow_wpclsFindObjectNext;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsFindObjectEnd(M_XShadow *somSelf, 
		HFIND hFind);
typedef somTP_M_XShadow_wpclsFindObjectEnd *somTD_M_XShadow_wpclsFindObjectEnd;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsSetError(M_XShadow *somSelf, 
		ULONG ulErrorId);
typedef somTP_M_XShadow_wpclsSetError *somTD_M_XShadow_wpclsSetError;
typedef ULONG   SOMLINK somTP_M_XShadow_wpclsQueryError(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsQueryError *somTD_M_XShadow_wpclsQueryError;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsQuerySettingsPageSize(M_XShadow *somSelf, 
		PSIZEL pSizl);
typedef somTP_M_XShadow_wpclsQuerySettingsPageSize *somTD_M_XShadow_wpclsQuerySettingsPageSize;
typedef WPObject*   SOMLINK somTP_M_XShadow_wpclsQueryObject(M_XShadow *somSelf, 
		HOBJECT hObject);
typedef somTP_M_XShadow_wpclsQueryObject *somTD_M_XShadow_wpclsQueryObject;
typedef ULONG   SOMLINK somTP_M_XShadow_wpclsQueryButtonAppearance(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsQueryButtonAppearance *somTD_M_XShadow_wpclsQueryButtonAppearance;
typedef void   SOMLINK somTP_M_XShadow_wpclsDecUsage(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsDecUsage *somTD_M_XShadow_wpclsDecUsage;
typedef void   SOMLINK somTP_M_XShadow_wpclsIncUsage(M_XShadow *somSelf);
typedef somTP_M_XShadow_wpclsIncUsage *somTD_M_XShadow_wpclsIncUsage;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsInsertMultipleObjects(M_XShadow *somSelf, 
		HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PVOID* pObjectArray, 
		PVOID pRecordParent, 
		ULONG NumRecords);
typedef somTP_M_XShadow_wpclsInsertMultipleObjects *somTD_M_XShadow_wpclsInsertMultipleObjects;
typedef WPObject*   SOMLINK somTP_M_XShadow_wpclsFindOneObject(M_XShadow *somSelf, 
		HWND hwndOwner, 
		PSZ pszFindParams);
typedef somTP_M_XShadow_wpclsFindOneObject *somTD_M_XShadow_wpclsFindOneObject;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsSetSettingsPageSize(M_XShadow *somSelf, 
		PSIZEL pSizl);
typedef somTP_M_XShadow_wpclsSetSettingsPageSize *somTD_M_XShadow_wpclsSetSettingsPageSize;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsSetIconData(M_XShadow *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_M_XShadow_wpclsSetIconData *somTD_M_XShadow_wpclsSetIconData;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsSetIcon(M_XShadow *somSelf, 
		HPOINTER hptrNewIcon);
typedef somTP_M_XShadow_wpclsSetIcon *somTD_M_XShadow_wpclsSetIcon;
typedef BOOL   SOMLINK somTP_M_XShadow_wpclsRemoveObjects(M_XShadow *somSelf, 
		HWND hwndCnr, 
		PVOID* pRecordArray, 
		ULONG NumRecords, 
		BOOL RemoveAll);
typedef somTP_M_XShadow_wpclsRemoveObjects *somTD_M_XShadow_wpclsRemoveObjects;
typedef void   SOMLINK somTP_M_XShadow_somUninit(M_XShadow *somSelf);
typedef somTP_M_XShadow_somUninit *somTD_M_XShadow_somUninit;
typedef void   SOMLINK somTP_M_XShadow_somClassReady(M_XShadow *somSelf);
typedef somTP_M_XShadow_somClassReady *somTD_M_XShadow_somClassReady;
typedef XShadow*   SOMLINK somTP_M_XShadow_somNew(M_XShadow *somSelf);
typedef somTP_M_XShadow_somNew *somTD_M_XShadow_somNew;
typedef SOMObject*   SOMLINK somTP_M_XShadow_somRenew(M_XShadow *somSelf, 
		void* obj);
typedef somTP_M_XShadow_somRenew *somTD_M_XShadow_somRenew;
typedef long   SOMLINK somTP_M_XShadow__get_somDataAlignment(M_XShadow *somSelf);
typedef somTP_M_XShadow__get_somDataAlignment *somTD_M_XShadow__get_somDataAlignment;
typedef SOMClass_somOffsets   SOMLINK somTP_M_XShadow__get_somInstanceDataOffsets(M_XShadow *somSelf);
typedef somTP_M_XShadow__get_somInstanceDataOffsets *somTD_M_XShadow__get_somInstanceDataOffsets;
typedef SOMClass_SOMClassSequence   SOMLINK somTP_M_XShadow__get_somDirectInitClasses(M_XShadow *somSelf);
typedef somTP_M_XShadow__get_somDirectInitClasses *somTD_M_XShadow__get_somDirectInitClasses;
typedef SOMObject*   SOMLINK somTP_M_XShadow_somNewNoInit(M_XShadow *somSelf);
typedef somTP_M_XShadow_somNewNoInit *somTD_M_XShadow_somNewNoInit;
typedef SOMObject*   SOMLINK somTP_M_XShadow_somRenewNoInit(M_XShadow *somSelf, 
		void* obj);
typedef somTP_M_XShadow_somRenewNoInit *somTD_M_XShadow_somRenewNoInit;
typedef SOMObject*   SOMLINK somTP_M_XShadow_somRenewNoZero(M_XShadow *somSelf, 
		void* obj);
typedef somTP_M_XShadow_somRenewNoZero *somTD_M_XShadow_somRenewNoZero;
typedef SOMObject*   SOMLINK somTP_M_XShadow_somRenewNoInitNoZero(M_XShadow *somSelf, 
		void* obj);
typedef somTP_M_XShadow_somRenewNoInitNoZero *somTD_M_XShadow_somRenewNoInitNoZero;
typedef somToken   SOMLINK somTP_M_XShadow_somAllocate(M_XShadow *somSelf, 
		long size);
typedef somTP_M_XShadow_somAllocate *somTD_M_XShadow_somAllocate;
typedef void   SOMLINK somTP_M_XShadow_somDeallocate(M_XShadow *somSelf, 
		somToken memptr);
typedef somTP_M_XShadow_somDeallocate *somTD_M_XShadow_somDeallocate;
typedef void   SOMLINK somTP_M_XShadow_somInitClass(M_XShadow *somSelf, 
		string className, 
		SOMClass* parentClass, 
		long dataSize, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_XShadow_somInitClass *somTD_M_XShadow_somInitClass;
typedef void   SOMLINK somTP_M_XShadow_somInitMIClass(M_XShadow *somSelf, 
		long inherit_vars, 
		string className, 
		SOMClass_SOMClassSequence* parentClasses, 
		long dataSize, 
		long dataAlignment, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_XShadow_somInitMIClass *somTD_M_XShadow_somInitMIClass;
typedef somMToken   SOMLINK somTP_M_XShadow_somAddStaticMethod(M_XShadow *somSelf, 
		somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr redispatchStub, 
		somMethodPtr applyStub);
typedef somTP_M_XShadow_somAddStaticMethod *somTD_M_XShadow_somAddStaticMethod;
typedef void   SOMLINK somTP_M_XShadow_somAddDynamicMethod(M_XShadow *somSelf, 
		somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr applyStub);
typedef somTP_M_XShadow_somAddDynamicMethod *somTD_M_XShadow_somAddDynamicMethod;
typedef void   SOMLINK somTP_M_XShadow_somOverrideSMethod(M_XShadow *somSelf, 
		somId methodId, 
		somMethodPtr method);
typedef somTP_M_XShadow_somOverrideSMethod *somTD_M_XShadow_somOverrideSMethod;
typedef somMethodPtr   SOMLINK somTP_M_XShadow_somGetApplyStub(M_XShadow *somSelf, 
		somId methodId);
typedef somTP_M_XShadow_somGetApplyStub *somTD_M_XShadow_somGetApplyStub;
typedef somClassDataStructure*   SOMLINK somTP_M_XShadow_somGetClassData(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetClassData *somTD_M_XShadow_somGetClassData;
typedef void   SOMLINK somTP_M_XShadow_somSetClassData(M_XShadow *somSelf, 
		somClassDataStructure* cds);
typedef somTP_M_XShadow_somSetClassData *somTD_M_XShadow_somSetClassData;
typedef somMethodTab*   SOMLINK somTP_M_XShadow_somGetClassMtab(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetClassMtab *somTD_M_XShadow_somGetClassMtab;
typedef long   SOMLINK somTP_M_XShadow_somGetInstanceOffset(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetInstanceOffset *somTD_M_XShadow_somGetInstanceOffset;
typedef long   SOMLINK somTP_M_XShadow_somGetInstancePartSize(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetInstancePartSize *somTD_M_XShadow_somGetInstancePartSize;
typedef long   SOMLINK somTP_M_XShadow_somGetInstanceSize(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetInstanceSize *somTD_M_XShadow_somGetInstanceSize;
typedef somDToken   SOMLINK somTP_M_XShadow_somGetInstanceToken(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetInstanceToken *somTD_M_XShadow_somGetInstanceToken;
typedef somDToken   SOMLINK somTP_M_XShadow_somGetMemberToken(M_XShadow *somSelf, 
		long memberOffset, 
		somDToken instanceToken);
typedef somTP_M_XShadow_somGetMemberToken *somTD_M_XShadow_somGetMemberToken;
typedef boolean   SOMLINK somTP_M_XShadow_somGetMethodData(M_XShadow *somSelf, 
		somId methodId, 
		somMethodData* md);
typedef somTP_M_XShadow_somGetMethodData *somTD_M_XShadow_somGetMethodData;
typedef somMethodProc*   SOMLINK somTP_M_XShadow_somGetRdStub(M_XShadow *somSelf, 
		somId methodId);
typedef somTP_M_XShadow_somGetRdStub *somTD_M_XShadow_somGetRdStub;
typedef somId   SOMLINK somTP_M_XShadow_somGetMethodDescriptor(M_XShadow *somSelf, 
		somId methodId);
typedef somTP_M_XShadow_somGetMethodDescriptor *somTD_M_XShadow_somGetMethodDescriptor;
typedef long   SOMLINK somTP_M_XShadow_somGetMethodIndex(M_XShadow *somSelf, 
		somId id);
typedef somTP_M_XShadow_somGetMethodIndex *somTD_M_XShadow_somGetMethodIndex;
typedef somMToken   SOMLINK somTP_M_XShadow_somGetMethodToken(M_XShadow *somSelf, 
		somId methodId);
typedef somTP_M_XShadow_somGetMethodToken *somTD_M_XShadow_somGetMethodToken;
typedef string   SOMLINK somTP_M_XShadow_somGetName(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetName *somTD_M_XShadow_somGetName;
typedef boolean   SOMLINK somTP_M_XShadow_somGetNthMethodData(M_XShadow *somSelf, 
		long n, 
		somMethodData* md);
typedef somTP_M_XShadow_somGetNthMethodData *somTD_M_XShadow_somGetNthMethodData;
typedef somId   SOMLINK somTP_M_XShadow_somGetNthMethodInfo(M_XShadow *somSelf, 
		long n, 
		somId* descriptor);
typedef somTP_M_XShadow_somGetNthMethodInfo *somTD_M_XShadow_somGetNthMethodInfo;
typedef long   SOMLINK somTP_M_XShadow_somGetNumMethods(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetNumMethods *somTD_M_XShadow_somGetNumMethods;
typedef long   SOMLINK somTP_M_XShadow_somGetNumStaticMethods(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetNumStaticMethods *somTD_M_XShadow_somGetNumStaticMethods;
typedef SOMClass*   SOMLINK somTP_M_XShadow_somGetParent(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetParent *somTD_M_XShadow_somGetParent;
typedef SOMClass_SOMClassSequence   SOMLINK somTP_M_XShadow_somGetParents(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetParents *somTD_M_XShadow_somGetParents;
typedef void   SOMLINK somTP_M_XShadow_somGetVersionNumbers(M_XShadow *somSelf, 
		long* majorVersion, 
		long* minorVersion);
typedef somTP_M_XShadow_somGetVersionNumbers *somTD_M_XShadow_somGetVersionNumbers;
typedef boolean   SOMLINK somTP_M_XShadow_somFindMethod(M_XShadow *somSelf, 
		somId methodId, 
		somMethodPtr* m);
typedef somTP_M_XShadow_somFindMethod *somTD_M_XShadow_somFindMethod;
typedef boolean   SOMLINK somTP_M_XShadow_somFindMethodOk(M_XShadow *somSelf, 
		somId methodId, 
		somMethodPtr* m);
typedef somTP_M_XShadow_somFindMethodOk *somTD_M_XShadow_somFindMethodOk;
typedef somMethodPtr   SOMLINK somTP_M_XShadow_somFindSMethod(M_XShadow *somSelf, 
		somId methodId);
typedef somTP_M_XShadow_somFindSMethod *somTD_M_XShadow_somFindSMethod;
typedef somMethodPtr   SOMLINK somTP_M_XShadow_somFindSMethodOk(M_XShadow *somSelf, 
		somId methodId);
typedef somTP_M_XShadow_somFindSMethodOk *somTD_M_XShadow_somFindSMethodOk;
typedef somMethodPtr   SOMLINK somTP_M_XShadow_somLookupMethod(M_XShadow *somSelf, 
		somId methodId);
typedef somTP_M_XShadow_somLookupMethod *somTD_M_XShadow_somLookupMethod;
typedef boolean   SOMLINK somTP_M_XShadow_somCheckVersion(M_XShadow *somSelf, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_XShadow_somCheckVersion *somTD_M_XShadow_somCheckVersion;
typedef boolean   SOMLINK somTP_M_XShadow_somDescendedFrom(M_XShadow *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_XShadow_somDescendedFrom *somTD_M_XShadow_somDescendedFrom;
typedef boolean   SOMLINK somTP_M_XShadow_somSupportsMethod(M_XShadow *somSelf, 
		somId mId);
typedef somTP_M_XShadow_somSupportsMethod *somTD_M_XShadow_somSupportsMethod;
typedef somMethodPtr   SOMLINK somTP_M_XShadow_somDefinedMethod(M_XShadow *somSelf, 
		somMToken method);
typedef somTP_M_XShadow_somDefinedMethod *somTD_M_XShadow_somDefinedMethod;
typedef void   SOMLINK somTP_M_XShadow_somOverrideMtab(M_XShadow *somSelf);
typedef somTP_M_XShadow_somOverrideMtab *somTD_M_XShadow_somOverrideMtab;
typedef void   SOMLINK somTP_M_XShadow_somDefaultInit(M_XShadow *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_M_XShadow_somDefaultInit *somTD_M_XShadow_somDefaultInit;
typedef void   SOMLINK somTP_M_XShadow_somDestruct(M_XShadow *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_M_XShadow_somDestruct *somTD_M_XShadow_somDestruct;
typedef void   SOMLINK somTP_M_XShadow_somDefaultCopyInit(M_XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultCopyInit *somTD_M_XShadow_somDefaultCopyInit;
typedef M_XShadow*   SOMLINK somTP_M_XShadow_somDefaultAssign(M_XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultAssign *somTD_M_XShadow_somDefaultAssign;
typedef void   SOMLINK somTP_M_XShadow_somDefaultConstCopyInit(M_XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultConstCopyInit *somTD_M_XShadow_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_M_XShadow_somDefaultVCopyInit(M_XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultVCopyInit *somTD_M_XShadow_somDefaultVCopyInit;
typedef void   SOMLINK somTP_M_XShadow_somDefaultConstVCopyInit(M_XShadow *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultConstVCopyInit *somTD_M_XShadow_somDefaultConstVCopyInit;
typedef M_XShadow*   SOMLINK somTP_M_XShadow_somDefaultConstAssign(M_XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultConstAssign *somTD_M_XShadow_somDefaultConstAssign;
typedef M_XShadow*   SOMLINK somTP_M_XShadow_somDefaultVAssign(M_XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultVAssign *somTD_M_XShadow_somDefaultVAssign;
typedef M_XShadow*   SOMLINK somTP_M_XShadow_somDefaultConstVAssign(M_XShadow *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_XShadow_somDefaultConstVAssign *somTD_M_XShadow_somDefaultConstVAssign;
typedef void   SOMLINK somTP_M_XShadow_somInit(M_XShadow *somSelf);
typedef somTP_M_XShadow_somInit *somTD_M_XShadow_somInit;
typedef void   SOMLINK somTP_M_XShadow_somFree(M_XShadow *somSelf);
typedef somTP_M_XShadow_somFree *somTD_M_XShadow_somFree;
typedef SOMClass*   SOMLINK somTP_M_XShadow_somGetClass(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetClass *somTD_M_XShadow_somGetClass;
typedef string   SOMLINK somTP_M_XShadow_somGetClassName(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetClassName *somTD_M_XShadow_somGetClassName;
typedef long   SOMLINK somTP_M_XShadow_somGetSize(M_XShadow *somSelf);
typedef somTP_M_XShadow_somGetSize *somTD_M_XShadow_somGetSize;
typedef boolean   SOMLINK somTP_M_XShadow_somIsA(M_XShadow *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_XShadow_somIsA *somTD_M_XShadow_somIsA;
typedef boolean   SOMLINK somTP_M_XShadow_somIsInstanceOf(M_XShadow *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_XShadow_somIsInstanceOf *somTD_M_XShadow_somIsInstanceOf;
typedef boolean   SOMLINK somTP_M_XShadow_somRespondsTo(M_XShadow *somSelf, 
		somId mId);
typedef somTP_M_XShadow_somRespondsTo *somTD_M_XShadow_somRespondsTo;
typedef boolean   SOMLINK somTP_M_XShadow_somDispatch(M_XShadow *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_M_XShadow_somDispatch *somTD_M_XShadow_somDispatch;
typedef boolean   SOMLINK somTP_M_XShadow_somClassDispatch(M_XShadow *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_M_XShadow_somClassDispatch *somTD_M_XShadow_somClassDispatch;
typedef boolean   SOMLINK somTP_M_XShadow_somCastObj(M_XShadow *somSelf, 
		SOMClass* cls);
typedef somTP_M_XShadow_somCastObj *somTD_M_XShadow_somCastObj;
typedef boolean   SOMLINK somTP_M_XShadow_somResetObj(M_XShadow *somSelf);
typedef somTP_M_XShadow_somResetObj *somTD_M_XShadow_somResetObj;
typedef void   SOMLINK somTP_M_XShadow_somDispatchV(M_XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_XShadow_somDispatchV *somTD_M_XShadow_somDispatchV;
typedef long   SOMLINK somTP_M_XShadow_somDispatchL(M_XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_XShadow_somDispatchL *somTD_M_XShadow_somDispatchL;
typedef void*   SOMLINK somTP_M_XShadow_somDispatchA(M_XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_XShadow_somDispatchA *somTD_M_XShadow_somDispatchA;
typedef double   SOMLINK somTP_M_XShadow_somDispatchD(M_XShadow *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_XShadow_somDispatchD *somTD_M_XShadow_somDispatchD;
typedef SOMObject*   SOMLINK somTP_M_XShadow_somPrintSelf(M_XShadow *somSelf);
typedef somTP_M_XShadow_somPrintSelf *somTD_M_XShadow_somPrintSelf;
typedef void   SOMLINK somTP_M_XShadow_somDumpSelf(M_XShadow *somSelf, 
		long level);
typedef somTP_M_XShadow_somDumpSelf *somTD_M_XShadow_somDumpSelf;
typedef void   SOMLINK somTP_M_XShadow_somDumpSelfInt(M_XShadow *somSelf, 
		long level);
typedef somTP_M_XShadow_somDumpSelfInt *somTD_M_XShadow_somDumpSelfInt;
}

#endif /* M_XShadow_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_XShadow
 */
class M_XShadow : public M_WPShadow
{
/*
 *  New Class methods
 */
public:

// M_XShadow::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_XShadow) M_XShadowNewClass(M_XShadow_MajorVersion,M_XShadow_MinorVersion);
   return (void*)
      SOM_Resolve(_M_XShadow,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_XShadow));
}

// M_XShadow::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

M_XShadow& operator=(M_XShadow& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_XShadow()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_XShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_XShadow(M_XShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_XShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
M_XShadow(const M_XShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_XShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: clsGetResourceModule */
HMODULE   clsGetResourceModule()
{
/*
 *  Resource Module handle
 */
   return SOM_ResolveD(this,M_XShadow,M_XShadow,clsGetResourceModule)
	(this);
}


/* method: getHelpPath */
PSZ   getHelpPath()
{
/*
 *  Name of Help File
 *   attribute HMODULE  hmodResource; //# Resource module handle for XShadow
 */
   return SOM_ResolveD(this,M_XShadow,M_XShadow,getHelpPath)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: wpclsQueryTitle */
PSZ   wpclsQueryTitle()
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryTitle)
	(this);
}


/* method: wpclsQueryStyle */
ULONG   wpclsQueryStyle()
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryStyle)
	(this);
}


/* method: wpclsQueryIconData */
ULONG   wpclsQueryIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryIconData)
	(this,pIconInfo);
}


/* method: wpclsQuerySetting */
ULONG   wpclsQuerySetting(PSZ pszSetting, 
		PVOID pValue, 
		ULONG ulValueLen)
{
   return SOM_ResolveD(this,M_XShadow,M_WPAbstract,wpclsQuerySetting)
	(this,pszSetting,pValue,ulValueLen);
}


/* method: wpclsSetSetting */
BOOL   wpclsSetSetting(PSZ pszSetting, 
		PVOID pValue)
{
   return SOM_ResolveD(this,M_XShadow,M_WPAbstract,wpclsSetSetting)
	(this,pszSetting,pValue);
}


/* method: wpclsObjectFromHandle */
WPObject*   wpclsObjectFromHandle(HOBJECT hObject)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsObjectFromHandle)
	(this,hObject);
}


/* method: wpclsCreateDefaultTemplates */
BOOL   wpclsCreateDefaultTemplates(WPObject* Folder)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsCreateDefaultTemplates)
	(this,Folder);
}


/* method: wpclsInitData */
void   wpclsInitData()
{
   SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsInitData)
	(this);
}


/* method: wpclsMakeAwake */
WPObject*   wpclsMakeAwake(PSZ pszTitle, 
		ULONG ulStyle, 
		HPOINTER hptrIcon, 
		POBJDATA pObjData, 
		WPFolder* Folder, 
		ULONG ulUser)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsMakeAwake)
	(this,pszTitle,ulStyle,hptrIcon,pObjData,Folder,ulUser);
}


/* method: wpclsNew */
WPObject*   wpclsNew(PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsNew)
	(this,pszTitle,pszSetupEnv,Folder,fLock);
}


/* method: wpclsQueryDefaultHelp */
BOOL   wpclsQueryDefaultHelp(PULONG pHelpPanelId, 
		PSZ pszHelpLibrary)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryDefaultHelp)
	(this,pHelpPanelId,pszHelpLibrary);
}


/* method: wpclsQueryDefaultView */
ULONG   wpclsQueryDefaultView()
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryDefaultView)
	(this);
}


/* method: wpclsQueryDetails */
PCLASSDETAILS   wpclsQueryDetails()
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryDetails)
	(this);
}


/* method: wpclsQueryDetailsInfo */
ULONG   wpclsQueryDetailsInfo(PCLASSFIELDINFO* ppClassFieldInfo, 
		PULONG pSize)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryDetailsInfo)
	(this,ppClassFieldInfo,pSize);
}


/* method: wpclsQueryExtendedCriteria */
BOOL   wpclsQueryExtendedCriteria(PSZ pszName, 
		ULONG ulSearchType, 
		PVOID pvoidExtendedCriteria)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryExtendedCriteria)
	(this,pszName,ulSearchType,pvoidExtendedCriteria);
}


/* method: wpclsQueryFolder */
WPObject*   wpclsQueryFolder(PSZ pszLocation, 
		BOOL fLock)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryFolder)
	(this,pszLocation,fLock);
}


/* method: wpclsQueryIcon */
HPOINTER   wpclsQueryIcon()
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryIcon)
	(this);
}


/* method: wpclsQuerySearchInfo */
void   wpclsQuerySearchInfo(M_WPObject** ClassExtended, 
		M_WPObject** ClassCreate, 
		PULONG pulClassCriteriaSize)
{
   SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQuerySearchInfo)
	(this,ClassExtended,ClassCreate,pulClassCriteriaSize);
}


/* method: wpclsUnInitData */
void   wpclsUnInitData()
{
   SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsUnInitData)
	(this);
}


/* method: wpclsFindObjectFirst */
BOOL   wpclsFindObjectFirst(PCLASS pClassList, 
		PHFIND phFind, 
		PSZ pszTitle, 
		WPFolder* Folder, 
		BOOL fSubfolders, 
		PVOID pExtendedCriteria, 
		POBJECT pBuffer, 
		PULONG pCount)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsFindObjectFirst)
	(this,pClassList,phFind,pszTitle,Folder,fSubfolders,pExtendedCriteria,pBuffer,pCount);
}


/* method: wpclsFindObjectNext */
BOOL   wpclsFindObjectNext(HFIND hFind, 
		POBJECT pBuffer, 
		PULONG pCount)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsFindObjectNext)
	(this,hFind,pBuffer,pCount);
}


/* method: wpclsFindObjectEnd */
BOOL   wpclsFindObjectEnd(HFIND hFind)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsFindObjectEnd)
	(this,hFind);
}


/* method: wpclsSetError */
BOOL   wpclsSetError(ULONG ulErrorId)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsSetError)
	(this,ulErrorId);
}


/* method: wpclsQueryError */
ULONG   wpclsQueryError()
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryError)
	(this);
}


/* method: wpclsQuerySettingsPageSize */
BOOL   wpclsQuerySettingsPageSize(PSIZEL pSizl)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQuerySettingsPageSize)
	(this,pSizl);
}


/* method: wpclsQueryObject */
WPObject*   wpclsQueryObject(HOBJECT hObject)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryObject)
	(this,hObject);
}


/* method: wpclsQueryButtonAppearance */
ULONG   wpclsQueryButtonAppearance()
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsQueryButtonAppearance)
	(this);
}


/* method: wpclsDecUsage */
void   wpclsDecUsage()
{
   SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsDecUsage)
	(this);
}


/* method: wpclsIncUsage */
void   wpclsIncUsage()
{
   SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsIncUsage)
	(this);
}


/* method: wpclsInsertMultipleObjects */
BOOL   wpclsInsertMultipleObjects(HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PVOID* pObjectArray, 
		PVOID pRecordParent, 
		ULONG NumRecords)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsInsertMultipleObjects)
	(this,hwndCnr,pptlIcon,pObjectArray,pRecordParent,NumRecords);
}


/* method: wpclsFindOneObject */
WPObject*   wpclsFindOneObject(HWND hwndOwner, 
		PSZ pszFindParams)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsFindOneObject)
	(this,hwndOwner,pszFindParams);
}


/* method: wpclsSetSettingsPageSize */
BOOL   wpclsSetSettingsPageSize(PSIZEL pSizl)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsSetSettingsPageSize)
	(this,pSizl);
}


/* method: wpclsSetIconData */
BOOL   wpclsSetIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsSetIconData)
	(this,pIconInfo);
}


/* method: wpclsSetIcon */
BOOL   wpclsSetIcon(HPOINTER hptrNewIcon)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsSetIcon)
	(this,hptrNewIcon);
}


/* method: wpclsRemoveObjects */
BOOL   wpclsRemoveObjects(HWND hwndCnr, 
		PVOID* pRecordArray, 
		ULONG NumRecords, 
		BOOL RemoveAll)
{
   return SOM_ResolveD(this,M_XShadow,M_WPObject,wpclsRemoveObjects)
	(this,hwndCnr,pRecordArray,NumRecords,RemoveAll);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,M_XShadow,SOMObject,somUninit)
	(this);
}


/* method: somClassReady */
void   somClassReady()
{
   SOM_ResolveD(this,M_XShadow,SOMClass,somClassReady)
	(this);
}


/* method: somNew */
XShadow*  somNew()
{
   return SOM_ResolveD(this,M_XShadow,SOMClass,somNew)
	(this);
}


/* method: somRenew */
SOMObject*   somRenew(void* obj)
{
   return SOM_ResolveD(this,M_XShadow,SOMClass,somRenew)
	(this,obj);
}


/* method: _get_somDataAlignment */
long   _get_somDataAlignment()
{
/*
 *  The alignment required for the instance data structure
 *  introduced by the receiving class.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,_get_somDataAlignment)
	(this);
}


/* nonstatic method: _get_somInstanceDataOffsets */
SOMClass_somOffsets   _get_somInstanceDataOffsets()
{
/*
 *  A sequence of the instance data offsets for all classes used in
 *  the derivation of the receiving class (including the receiver).
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,_get_somInstanceDataOffsets)
	(this);
}


/* nonstatic method: _get_somDirectInitClasses */
SOMClass_SOMClassSequence   _get_somDirectInitClasses()
{
/*
 *  The ancestors whose initializers the receiving
 *  class wants to directly invoke.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,_get_somDirectInitClasses)
	(this);
}


/* method: somNewNoInit */
SOMObject*   somNewNoInit()
{
/*
 *  Equivalent to somNew except that somDefaultInit is not called.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somNewNoInit)
	(this);
}


/* method: somRenewNoInit */
SOMObject*   somRenewNoInit(void* obj)
{
/*
 *  Equivalent to somRenew except that somDefaultInit is not called.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somRenewNoInit)
	(this,obj);
}


/* method: somRenewNoZero */
SOMObject*   somRenewNoZero(void* obj)
{
/*
 *  Equivalent to somRenew except that memory is not zeroed out.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somRenewNoZero)
	(this,obj);
}


/* method: somRenewNoInitNoZero */
SOMObject*   somRenewNoInitNoZero(void* obj)
{
/*
 *  The purpose of this method is to load an object's method table.
 *  The SOM API requires that somRenewNoInitNoZero always be
 *  called when creating a new object whose metaclass is not SOMClass.
 *  This is because metaclasses must be guaranteed that they can use
 *  somRenewNoInitNoZero to track object creation if this is desired.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somRenewNoInitNoZero)
	(this,obj);
}


/* nonstatic method: somAllocate */
somToken   somAllocate(long size)
{
/*
 *  Allocates memory to hold an object and returns a pointer to this memory.
 *  This is a nonstatic method, and cannot be overridden. The default
 *  implementation calls SOMMalloc, but a class designer can specify a
 *  different implementation using the somallocate modifier in IDL. The
 *  allocator takes the same parameters as this method.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somAllocate)
	(this,size);
}


/* nonstatic method: somDeallocate */
void   somDeallocate(somToken memptr)
{
/*
 *  Zeros out the method table pointer stored in the word pointed to by
 *  memptr, and then deallocates the block of memory pointed to by memptr.
 *  This is a nonstatic method and cannot be overridden. The default
 *  deallocator called is SOMFree, but a class designer can specify a
 *  different deallocator using the somdeallocate modifier in IDL. The
 *  deallocator takes a char* (memptr) and a long (size) as arguments.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somDeallocate)
	(this,memptr);
}


/* method: somInitClass */
void   somInitClass(string className, 
		SOMClass* parentClass, 
		long dataSize, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion)
{
/*
 *  somInitClass is obsolete, and should no longer be used. The SOM 2.0
 *  kernel provides special handling for redispatch stubs in the case
 *  of SOM 1.0 classes, and use of this method is what tells the kernel
 *  that old-style redispatch stubs will be registered.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somInitClass)
	(this,className,parentClass,dataSize,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somInitMIClass */
void   somInitMIClass(long inherit_vars, 
		string className, 
		SOMClass_SOMClassSequence* parentClasses, 
		long dataSize, 
		long dataAlignment, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion)
{
/*
 *  somInitMIClass implements the second phase of dynamic class creation:
 *  inheritance of interface and possibly implementation (instance
 *  variables) by suitable initialization of <self> (a class object).
 * 
 *  For somInitMIClass, the inherit_vars argument controls whether abstract
 *  or implementation inheritance is used. Inherit_vars is a 32 bit
 *  bit-vector. Implementation is inherited from parent i iff the bit
 *  1<<i is on, or i>=32.
 *  On a class-by-class basis, for each class ancestor, implementation
 *  inheritance always takes precidence over abstract inheritance. This is
 *  necessary to guarantee that procedures supporting parent method calls
 *  (available on non-abstract parents) are always supported by parent
 *  instance variables.
 * 
 *  <className> is a string containing the class name. A copy is made, so
 *  the string may be freed upon return to the caller if this is desired.
 * 
 *  <parentClasses> is a SOMClassSequence containing pointers to the
 *  parent classes. somInitMIClass makes a copy of this, so it may
 *  be freed upon return to the caller if this is desired.
 * 
 *  <dataSize> is the space needed for the instance variables
 *  introduced by this class.
 * 
 *  <dataAlignment> specifies the desired byte alignment for instance
 *  data introduced by this class. A value of 0 selects a system-wide default;
 *  any other argument is taken as the desired byte alignment multiple. Thus,
 *  for example, even if a byte multiple of 8 is needed for double precision
 *  values on a given system (so 8 is the default), a class whose instance data
 *  doesn't require this can indicate otherwise. If A is the next memory
 *  address available for holding instance data, the address that will be
 *  used is A + (A mod byte-alignment).
 * 
 *  <maxStaticMethods> is the maximum number of static methods that will be
 *  added to the initialized class using addStaticMethod.
 * 
 *  <majorVersion> indicates the major version number for this
 *  implementation of the class definition, and <minorVersion>
 *  indicates the minor version number.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somInitMIClass)
	(this,inherit_vars,className,parentClasses,dataSize,dataAlignment,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somAddStaticMethod */
somMToken   somAddStaticMethod(somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr redispatchStub, 
		somMethodPtr applyStub)
{
/*
 *  Adds the indicated method, creating and returning a new method token.
 * 
 *  <methodDescriptor> is the somId for an identifier that can be used
 *  to access signature information about the method from an interface
 *  repository.
 * 
 *  <method> is the actual method procedure for this method
 * 
 *  <redispatchStub> is a procedure with the same calling sequence as
 *  <method> that invokes somDispatch for the method.
 * 
 *  <applyStub> is a procedure used to support somApply.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somAddStaticMethod)
	(this,methodId,methodDescriptor,method,redispatchStub,applyStub);
}


/* method: somAddDynamicMethod */
void   somAddDynamicMethod(somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr applyStub)
{
/*
 *  Adds the indicated method to the class's name lookup list.
 *  If this happens to override a static method then this operation is
 *  equivalent to <somOverrideSMethod> and the <methodDescriptor> and
 *  <applyStub> arguments are ignored (the overridden method's values
 *  will be used).
 * 
 *  <methodDescriptor> is the somId for an identifier that can be used
 *  to access signature information about the method from an interface
 *  repository.
 * 
 *  <method> is the actual method procedure for this method
 * 
 *  <applyStub> is a procedure that takes a standard variable argument
 *  list data structure applies it to its target object by calling
 *  <method> with arguments derived from the data structure.  Its
 *  calling sequence is the same as the calling sequence of the
 *  dispatch methods defined in SOMObject.  This stub is used in the
 *  support of the dispatch methods used in some classes.  In classes
 *  where the dispatch functions do not need such a function this
 *  parameter may be null.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somAddDynamicMethod)
	(this,methodId,methodDescriptor,method,applyStub);
}


/* method: somOverrideSMethod */
void   somOverrideSMethod(somId methodId, 
		somMethodPtr method)
{
/*
 *  This method can be used instead of <somAddStaticMethod> or
 *  <somAddDynamicMethod> when it is known that the class' parent
 *  class already supports this method.  This call does not require the
 *  method descriptor and stub methods that the others do.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somOverrideSMethod)
	(this,methodId,method);
}


/* method: somGetApplyStub */
somMethodPtr   somGetApplyStub(somId methodId)
{
/*
 *  Returns the apply stub associated with the specified method,
 *  if one exists; otherwise NULL is returned. This method is obsolete,
 *  and retained for binary compatability. In SOMr2, users never access
 *  apply stubs directly; The function somApply is used to invoke apply
 *  stubs. See somApply documentation for further information on apply
 *  stubs, and see somAddStaticMethod documentation for information
 *  on how apply stubs are registered by class implementations.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetApplyStub)
	(this,methodId);
}


/* method: somGetClassData */
somClassDataStructure*   somGetClassData()
{
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetClassData)
	(this);
}


/* method: somSetClassData */
void   somSetClassData(somClassDataStructure* cds)
{
/*
 *  The class' pointer to the static <className>ClassData structure.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somSetClassData)
	(this,cds);
}


/* method: somGetClassMtab */
somMethodTab*   somGetClassMtab()
{
/*
 *  A pointer to the method table used by instances of this class. This
 *  method was misnamed; it should have been called somGetInstanceMtab.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetClassMtab)
	(this);
}


/* method: somGetInstanceOffset */
long   somGetInstanceOffset()
{
/*
 *  Returns the offset of instance data introduced by the receiver in
 *  an instance of the receiver. This method is obsolete and not useful in
 *  multiple-inheritance situations. The attribute somInstanceDataOffsets
 *  replaces this method.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetInstanceOffset)
	(this);
}


/* method: somGetInstancePartSize */
long   somGetInstancePartSize()
{
/*
 *  The size in bytes of the instance data introduced by the receiving
 *  class.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetInstancePartSize)
	(this);
}


/* method: somGetInstanceSize */
long   somGetInstanceSize()
{
/*
 *  The total size of an instance of the receiving class.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetInstanceSize)
	(this);
}


/* method: somGetInstanceToken */
somDToken   somGetInstanceToken()
{
/*
 *  A data token that identifies the introduced portion of this class
 *  within itself or any derived class.  This token can be subsequently
 *  passed to the run-time somDataResolve function to locate the instance
 *  data introduced by this class in any object derived from this class.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetInstanceToken)
	(this);
}


/* method: somGetMemberToken */
somDToken   somGetMemberToken(long memberOffset, 
		somDToken instanceToken)
{
/*
 *  Returns a data token that for the data member at offset
 *  "memberOffset" within the introduced portion of the class identified
 *  by instanceToken.  The instance token must have been obtained from a
 *  previous invocation of somGetInstanceToken.  The returned member
 *  token can be subsequently passed to the run-time somDataResolve
 *  function to locate the data member.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetMemberToken)
	(this,memberOffset,instanceToken);
}


/* method: somGetMethodData */
boolean   somGetMethodData(somId methodId, 
		somMethodData* md)
{
/*
 *  If a method with id <methodId> is supported by the target class,
 *  the structure pointed to by <md> is loaded with method information
 *  and the value 1 is returned. In this case, if the method is not
 *  dynamic, md->method is loaded with the result of somClassResolve on
 *  the target class for the method. If the method is not supported,
 *  md->id is loaded with 0, and the value 0 is returned.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetMethodData)
	(this,methodId,md);
}


/* method: somGetRdStub */
somMethodProc*   somGetRdStub(somId methodId)
{
/*
 *  Returns a redispatch stub for the indicated method, if possible.
 *  If not possible (because a valid redispatch stub has not been
 *  registered, and there is insufficient information to dynamically
 *  construct one), then a NULL is returned.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetRdStub)
	(this,methodId);
}


/* method: somGetMethodDescriptor */
somId   somGetMethodDescriptor(somId methodId)
{
/*
 *  Returns the method descriptor for the indicated method.    If
 *  this object does not support the indicated method then NULL is
 *  returned.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetMethodDescriptor)
	(this,methodId);
}


/* method: somGetMethodIndex */
long   somGetMethodIndex(somId id)
{
/*
 *  Returns the index for the specified method. (A number that may
 *  change if any methods are added or deleted to this class object or
 *  any of its ancestors).  This number is the basis for other calls to
 *  get info about the method. Indexes start at 0. A -1 is returned if
 *  the method cannot be found.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetMethodIndex)
	(this,id);
}


/* method: somGetMethodToken */
somMToken   somGetMethodToken(somId methodId)
{
/*
 *  Returns the specified method's access token. This token can then
 *  be passed to method resolution routines, which use the token
 *  to select a method pointer from a method table.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetMethodToken)
	(this,methodId);
}


/* method: somGetName */
string   somGetName()
{
/*
 *  This object's class name as a NULL terminated string.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetName)
	(this);
}


/* method: somGetNthMethodData */
boolean   somGetNthMethodData(long n, 
		somMethodData* md)
{
/*
 *  loads *md with the method data associated with the the nth method,
 *  or NULL if there is no such method. Returns true is successful;
 *  false otherwise.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetNthMethodData)
	(this,n,md);
}


/* method: somGetNthMethodInfo */
somId   somGetNthMethodInfo(long n, 
		somId* descriptor)
{
/*
 *  Returns the id of the <n>th method if one exists and NULL
 *  otherwise.
 * 
 *  The ordering of the methods is unpredictable, but will not change
 *  unless some change is made to the class or one of its ancestor classes.
 * 
 *  See CORBA documentation for info on method descriptors.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetNthMethodInfo)
	(this,n,descriptor);
}


/* method: somGetNumMethods */
long   somGetNumMethods()
{
/*
 *  The number of methods currently supported by this class,
 *  including inherited methods (both static and dynamic).
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetNumMethods)
	(this);
}


/* method: somGetNumStaticMethods */
long   somGetNumStaticMethods()
{
/*
 *  The number of static methods that this class has.  Can
 *  be used by a child class when initializing its method table.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetNumStaticMethods)
	(this);
}


/* method: somGetParent */
SOMClass*   somGetParent()
{
/*
 *  Returns the parent class of self (along its "left-hand" derivation
 *  path), if one exists and NULL otherwise.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetParent)
	(this);
}


/* method: somGetParents */
SOMClass_SOMClassSequence   somGetParents()
{
/*
 *  The parent classes of self.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somGetParents)
	(this);
}


/* method: somGetVersionNumbers */
void   somGetVersionNumbers(long* majorVersion, 
		long* minorVersion)
{
/*
 *  Returns the class' major and minor version numbers in the corresponding
 *  output parameters.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somGetVersionNumbers)
	(this,majorVersion,minorVersion);
}


/* method: somFindMethod */
boolean   somFindMethod(somId methodId, 
		somMethodPtr* m)
{
/*
 *  Finds the method procedure associated with <methodId> for this
 *  class and sets <m> to it.  1 (true) is returned when the
 *  method procedure is a static method and 0 (false) is returned
 *  when the method procedure is dynamic method.
 * 
 *  If the class does not support the specified method then
 *  <m> is set to NULL and the return value is meaningless.
 * 
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somFindMethod)
	(this,methodId,m);
}


/* method: somFindMethodOk */
boolean   somFindMethodOk(somId methodId, 
		somMethodPtr* m)
{
/*
 *  Just like <somFindMethod> except that if the method is not
 *  supported then an error is raised and execution is halted.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somFindMethodOk)
	(this,methodId,m);
}


/* method: somFindSMethod */
somMethodPtr   somFindSMethod(somId methodId)
{
/*
 *  Finds the indicated method, which must be a static method supported
 *  by this class, and returns a pointer to its method procedure.
 *  If the method is not supported by the receiver (as a static method
 *  or at all) then a NULL pointer is returned.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somFindSMethod)
	(this,methodId);
}


/* method: somFindSMethodOk */
somMethodPtr   somFindSMethodOk(somId methodId)
{
/*
 *  Uses <somFindSMethod>, and raises an error if the result is NULL.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somFindSMethodOk)
	(this,methodId);
}


/* method: somLookupMethod */
somMethodPtr   somLookupMethod(somId methodId)
{
/*
 *  Like <somFindSMethodOK>, but without restriction to static methods.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somLookupMethod)
	(this,methodId);
}


/* method: somCheckVersion */
boolean   somCheckVersion(long majorVersion, 
		long minorVersion)
{
/*
 *  Returns 1 (true) if the implementation of this class is
 *  compatible with the specified major and minor version number and
 *  false (0) otherwise.  An implementation is compatible with the
 *  specified version numbers if it has the same major version number
 *  and a minor version number that is equal to or greater than
 *  <minorVersion>.    The major, minor version number pair (0,0) is
 *  considered to match any version.  This method is usually called
 *  immediately after creating the class object to verify that a
 *  dynamically loaded class definition is compatible with a using
 *  application.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somCheckVersion)
	(this,majorVersion,minorVersion);
}


/* method: somDescendedFrom */
boolean   somDescendedFrom(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if <self> is a descendent class of <aClassObj> and
 *  0 (false) otherwise.  Note: a class object is considered to be
 *  descended itself for the purposes of this method.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somDescendedFrom)
	(this,aClassObj);
}


/* method: somSupportsMethod */
boolean   somSupportsMethod(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method is supported by this
 *  class and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somSupportsMethod)
	(this,mId);
}


/* method: somDefinedMethod */
somMethodPtr   somDefinedMethod(somMToken method)
{
/*
 *  if the receiving class either introduces or overrides the
 *  indicated method, then its somMethodPtr is returned, otherwise
 *  NULL is returned.
 */
   return SOM_ResolveD(this,M_XShadow,SOMClass,somDefinedMethod)
	(this,method);
}


/* method: somOverrideMtab */
void   somOverrideMtab()
{
/*
 *  Overrides the method table pointers to point to the redispatch stubs.
 *  All the methods except somDispatch methods are overriden.
 */
   SOM_ResolveD(this,M_XShadow,SOMClass,somOverrideMtab)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
M_XShadow*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
M_XShadow*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
M_XShadow*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
M_XShadow*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   M_XShadow_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,M_XShadow,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,M_XShadow,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   M_XShadow_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,M_XShadow,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,M_XShadow,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   M_XShadow_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   M_XShadow_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   M_XShadow_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   M_XShadow_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,M_XShadow,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,M_XShadow,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,M_XShadow,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* M_XShadow */



#endif       /* SOM_M_XShadow_xh */
