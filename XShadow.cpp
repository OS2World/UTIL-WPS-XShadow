
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.24
 */


/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using template emitter:
 *      SOM Emitter emitxtm: 2.23.1.9
 */

#ifndef SOM_Module_xshadow_Source
#define SOM_Module_xshadow_Source
#endif
#define XShadow_Class_Source
#define M_XShadow_Class_Source

#pragma strings("readonly")

#include "XShadow.xih"
#include "Resource.h"

/*
** Utility Routines
*/
PSZ SOMstrdup(const char *str)
{
PSZ ret=NULL;

    if ( str != NULL)  {
      ret = (char*) SOMMalloc( strlen( str ) + 1 );

      if (ret != NULL)
        strcpy( ret, str );
      }
    return ret;
}

/*
** Resolves a class method for an arbitrary class.
*/
PVOID resolveClassMethod( const char *pcszClassName, const char *pcszMethodName )
{
    PVOID pClassMethod = 0;

    somId     wpobjectId    = SOM_IdFromString( (char *) pcszClassName );
    SOMClass  *pClass = SOMClassMgrObject->somClassFromId ( wpobjectId );

    SOMFree ( wpobjectId );

    if (!pClass)
        somPrintf ( "Class \"%s\"has not been loaded!.\n", pcszClassName );
    else {
        somId somMethodId = somIdFromString( (char *) pcszMethodName );
        if (somMethodId) {
            somMToken tok = pClass->somGetMethodToken( somMethodId );
            SOMFree(somMethodId);

            if (tok) {
                pClassMethod = somClassResolve( pClass, tok );
                if (!pClassMethod)
                    somPrintf( "somClassResolved failed for %s\n", pcszMethodName );
                }
            else
                somPrintf( "Cannot get method token for %s.\n", pcszMethodName);

            }
        else
            somPrintf(  "Cannot get somId for %s.", pcszMethodName);
        }

    return (pClassMethod);
}

/*
 * Init my data
 */
SOM_Scope void  SOMLINK wpInitData(XShadow *somSelf)
{
    XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpInitData");

    somThis->myClass = somSelf->somGetClass();                          // My class
    somThis->resourceModule = somThis->myClass->clsGetResourceModule(); // My resource DLL

    somThis->nameModified = FALSE;

    somThis->lockedInPlace = FALSE;

    XShadow_parent_WPShadow_wpInitData(somSelf);

    // So we can find our real title
    somThis->WPObject_wpQueryTitle       = resolveClassMethod( "WPObject", "wpQueryTitle" );
    somThis->WPObject_wpMenuItemSelected = resolveClassMethod( "WPObject", "wpMenuItemSelected" );
    somThis->WPObject_wpQueryStyle       = resolveClassMethod( "WPObject", "wpQueryStyle" );

    if (somThis->WPObject_wpQueryTitle == NULL)
       somPrintf ( "Failed to get WPObject_wpQueryTitle ptr\n" );
    if (somThis->WPObject_wpMenuItemSelected == NULL)
       somPrintf ( "Failed to get WPObject_wpMenuItemSelected ptr\n" );
    if (somThis->WPObject_wpQueryStyle == NULL)
       somPrintf ( "Failed to get WPObject_wpQueryStyle ptr\n" );
}

/*
 * Restore my state
 */

SOM_Scope BOOL  SOMLINK wpRestoreState(XShadow *somSelf, ULONG ulReserved)
{
somTP_WPObject_wpRestoreState *WPObject_wpRestoreState;
ULONG wpRestoreLongErrorId = 0;  /*  Error identities. */

    XShadowData *somThis = XShadowGetData(somSelf);
    XShadowMethodDebug("XShadow","wpRestoreState");

    if (!somSelf->wpRestoreLong( "XShadow", PR_LOCKEDINPLACE, &somThis->lockedInPlace )) {
       wpRestoreLongErrorId = somSelf->wpQueryError();
       somPrintf ( "wpRestoreLong(%lX) failed, errorcode=>%lX\n", somThis->lockedInPlace, wpRestoreLongErrorId );
       somThis->lockedInPlace = TRUE;
       }
    else
       somPrintf ( "wpRestoreLong(%lX) OK\n", somThis->lockedInPlace );

//    WPObject_wpRestoreState = (somTP_WPObject_wpRestoreState *)resolveClassMethod( "WPObject", "wpRestoreState" );
//    if (WPObject_wpRestoreState == NULL)
//       somPrintf ( "Failed to get WPObject_wpRestoreState ptr\n" );
//    else
//       WPObject_wpRestoreState(somSelf, ulReserved);

    return (XShadow_parent_WPShadow_wpRestoreState(somSelf, ulReserved));
}

/*
 * Save my state
 */

SOM_Scope BOOL  SOMLINK wpSaveState(XShadow *somSelf)
{
somTP_WPObject_wpSaveState *WPObject_wpSaveState;
ULONG wpSaveLongErrorId = 0;  /*  Error identities. */

    XShadowData *somThis = XShadowGetData(somSelf);
    XShadowMethodDebug("XShadow","wpSaveState");

    if (!somSelf->wpSaveLong( "XShadow", PR_LOCKEDINPLACE, somThis->lockedInPlace )) {
       wpSaveLongErrorId = somSelf->wpQueryError();
       somPrintf ( "wpSaveLong(%lX) failed, errorcode=>%lX\n", somThis->lockedInPlace, wpSaveLongErrorId );
       }
    else
       somPrintf ( "wpSaveLong(%lX) OK =>\n", somThis->lockedInPlace );

//    WPObject_wpSaveState = (somTP_WPObject_wpSaveState *)resolveClassMethod( "WPObject", "wpSaveState" );
//    if (WPObject_wpSaveState == NULL)
//       somPrintf ( "Failed to get WPObject_wpSaveState ptr\n" );
//    else
//       WPObject_wpSaveState(somSelf);

    return (XShadow_parent_WPShadow_wpSaveState(somSelf));
}

/*
 * Recover memory for my data
 */
SOM_Scope void  SOMLINK wpUnInitData(XShadow *somSelf)
{
//  XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpUnInitData");

    XShadow_parent_WPShadow_wpUnInitData(somSelf);
}

/*
 * Add my menu items
 */

SOM_Scope BOOL  SOMLINK wpModifyPopupMenu(XShadow *somSelf, HWND hwndMenu,
                                          HWND hwndCnr, ULONG iPosition)
{
    XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpModifyPopupMenu");

//  somPrintf( "XShadow:wpModifyPopupMenu() resourceModule=%X\n", somThis->resourceModule );

    // Add the items inherited from parent
    BOOL rc = XShadow_parent_WPShadow_wpModifyPopupMenu( somSelf,
                                                         hwndMenu,
                                                         hwndCnr,
                                                         iPosition+1);
    MENUITEM mi;

    // Find "Original->" sub menu
    WinSendMsg( hwndMenu,                            // Handle of menu bar
                MM_QUERYITEM,                        // Find submenu
                MPFROM2SHORT(0xBCE, TRUE),           // Submenu identifier what's it ID?
                (MPARAM) &mi);                       // Pointer to MENUITEM

    // Insert new item(s) at end of "Original" sub menu
    somSelf->wpInsertPopupMenuItems( mi.hwndSubMenu,           // Handle to "Original" submenu
                                     (ULONG)MIT_END,           // Add at end
                                     somThis->resourceModule,  // Resource module containing menu
                                     IDM_POP_MENU,             // Resource ID
                                     WPMENUID_PRIMARY);        // Submenu ID ?

    return rc;
}

/*
 * create a shadow of an object
 */

/*
 * Create a shadow of an object
 */

SOM_Scope WPObject*  SOMLINK wpCreateShadowObject(XShadow *somSelf,
                                                  WPFolder* Folder,
                                                  BOOL fLock)
{
//  XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpCreateShadowObject");

    return (XShadow_parent_WPShadow_wpCreateShadowObject(somSelf, Folder,  fLock));
}

/*
 * Handle my menu items
 */
/*
 * Handle my menu items & filter others
 */

SOM_Scope BOOL  SOMLINK wpMenuItemSelected(XShadow *somSelf,
                                           HWND hwndFrame, ULONG ulMenuId)
{
    XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpMenuItemSelected");
//  somPrintf( "XShadow:wpMenuItemSelected(ulMenuId=%d(%X)\n", ulMenuId, ulMenuId);

    switch (ulMenuId)  {
//       case WPMENUID_LOCKEDINPLACE:
//          somPrintf ( "wpMenuItemSelected(WPMENUID_LOCKEDINPLACE)\n" );
//          return somSelf->wpModifyStyle(OBJSTYLE_LOCKEDINPLACE, OBJSTYLE_LOCKEDINPLACE);

//          if (somThis->WPObject_wpMenuItemSelected != NULL)
//             return (((somTP_WPObject_wpMenuItemSelected *)somThis->WPObject_wpMenuItemSelected)
//                         (somSelf, hwndFrame, ulMenuId));
//          return (XShadow_parent_WPShadow_wpMenuItemSelected(somSelf, hwndFrame, ulMenuId));

       case WPMENUID_LOCKEDINPLACENO:
          // We handle this ourselves to avoid it propagating to the shadowed object
          // I don't really like this method but it's the only one that I found worked.
          somPrintf ( "wpMenuItemSelected(WPMENUID_LOCKEDINPLACENO)\n" );
          somThis->lockedInPlace = FALSE;
          somSelf->wpSaveDeferred();
          return TRUE;
//          return (XShadow_parent_WPShadow_wpModifyStyle(somSelf, OBJSTYLE_LOCKEDINPLACE, 0));
//          return somSelf->wpModifyStyle(OBJSTYLE_LOCKEDINPLACE, 0);
//          if (somThis->WPObject_wpMenuItemSelected != NULL)
//             return (((somTP_WPObject_wpMenuItemSelected *)somThis->WPObject_wpMenuItemSelected)
//                         (somSelf, hwndFrame, ulMenuId));
//          return (XShadow_parent_WPShadow_wpMenuItemSelected(somSelf, hwndFrame, ulMenuId));

       case WPMENUID_LOCKEDINPLACEYES:
          // We handle this ourselves to avoid it propagating to the shadowed object
          // I don't really like this method but it's the only one that I found worked.
          somPrintf ( "wpMenuItemSelected(WPMENUID_LOCKEDINPLACEYES)\n" );
          somThis->lockedInPlace = TRUE;
          somSelf->wpSaveDeferred();
          return TRUE;
//          return (XShadow_parent_WPShadow_wpModifyStyle(somSelf, OBJSTYLE_LOCKEDINPLACE, OBJSTYLE_LOCKEDINPLACE));
//          return somSelf->wpModifyStyle(OBJSTYLE_LOCKEDINPLACE, OBJSTYLE_LOCKEDINPLACE);
//          if (somThis->WPObject_wpMenuItemSelected != NULL)
//             return (((somTP_WPObject_wpMenuItemSelected *)somThis->WPObject_wpMenuItemSelected)
//                         (somSelf, hwndFrame, ulMenuId));
//          return (XShadow_parent_WPShadow_wpMenuItemSelected(somSelf, hwndFrame, ulMenuId));

       case IDM_ABOUTXSHADOW:
          return(somSelf->wpDisplayHelp(HLP_ABOUTXSHADOW, somThis->myClass->getHelpPath()) );

       case IDM_RESTORETITLE: {
          // Restore name of shadow to that of shadowed object
//        somPrintf( "XShadow:wpMenuItemSelected(ulMenuId=ID_RESTORENAME)\n" );

          // Obtain a pointer to the shadowed object's title.
          // This is not actually necessary as wpQueryTitle on a shadow returns
          // the shadowed object's title.
          // I don't think it should so I do it this way.
          WPObject  *shadowedObject     = somSelf->wpQueryShadowedObject( FALSE );
          PSZ        originalTitle      = (shadowedObject!=NULL)?shadowedObject->wpQueryTitle():NULL;
          if (originalTitle != NULL) { // got a title!
             XShadow_parent_WPShadow_wpSetShadowTitle(somSelf, originalTitle);
             somThis->nameModified = 0;
             }
          return TRUE;
          }
       }

   // not one of mine - pass to parent
   return (XShadow_parent_WPShadow_wpMenuItemSelected(somSelf, hwndFrame, ulMenuId));
}

/*
 * modify Help menu item
 */
/*
 * Modify Help menu item
 */

SOM_Scope BOOL  SOMLINK wpMenuItemHelpSelected(XShadow *somSelf,
                                               ULONG MenuId)
{
   XShadowData *somThis = XShadowGetData(somSelf);
// XShadowMethodDebug("XShadow","wpMenuItemHelpSelected");

   switch(MenuId)
    {
       case IDM_ABOUTXSHADOW:
          return( somSelf->wpDisplayHelp(HLP_ABOUTXSHADOWMENU, somThis->myClass->getHelpPath()) );

       case IDM_RESTORETITLE:
          return( somSelf->wpDisplayHelp(HLP_RESTORETITLE, somThis->myClass->getHelpPath()) );
    }

    /* Always return the parent's method in case of default */
    return (XShadow_parent_WPShadow_wpMenuItemHelpSelected(somSelf, MenuId));
}

/*
 * Open a view
 */
SOM_Scope HWND  SOMLINK wpOpen(XShadow *somSelf, HWND hwndCnr, ULONG ulView, ULONG param)
{
//  XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpOpen");

    return (XShadow_parent_WPShadow_wpOpen(somSelf, hwndCnr, ulView, param));
}

/*
 * Create a copy of an object
 */
SOM_Scope WPObject*  SOMLINK wpCopyObject(XShadow *somSelf, WPFolder* Folder, BOOL fLock)
{
//  XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpCopyObject");

    return (XShadow_parent_WPShadow_wpCopyObject(somSelf, Folder, fLock));
}

/*
 * Move an object
 */
SOM_Scope BOOL  SOMLINK wpMoveObject(XShadow *somSelf, WPFolder* Folder)
{
//  XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpMoveObject");

    return (XShadow_parent_WPShadow_wpMoveObject(somSelf, Folder));
}

/*
 * Set title of shadowed object ?
 */
SOM_Scope BOOL  SOMLINK wpSetTitle(XShadow *somSelf, PSZ pszNewTitle)
{
    // This is called when the shadow is renamed.
    // By default the parent SOM class renames the
    // shadowed object as well.
    // We'll just rename the shadow.
    XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpSetTitle");

    //  Obtain a pointer to the shadowed object's title.
    WPObject  *shadowedObject     = somSelf->wpQueryShadowedObject( FALSE );
    PSZ        originalTitle      = (shadowedObject!=NULL)?shadowedObject->wpQueryTitle():NULL;
//  PSZ        currentShadowTitle = ((WPObject *)somSelf)->wpQueryTitle();

    // Check if the name is different from the shadow's name

    somThis->nameModified = (pszNewTitle != NULL) && (originalTitle != NULL) &&
                            (strcmp( pszNewTitle, originalTitle ) != 0);

//  somPrintf( "XShadow:wpSetTitle(\'%s\') current shadow = \'%s\', original=\'%s\', nameModified=%s\n",
//             pszNewTitle, currentShadowTitle, originalTitle, somThis->nameModified?"T":"F" );

    return (XShadow_parent_WPShadow_wpSetShadowTitle(somSelf, pszNewTitle));

//  return (XShadow_parent_WPShadow_wpSetTitle(somSelf, pszNewTitle));
//  return (somSelf->wpSetShadowTitle(pszNewTitle));
}

/*
 * Set Shadow title
 */
SOM_Scope BOOL  SOMLINK wpSetShadowTitle(XShadow *somSelf, PSZ pszNewTitle)
{
    // This is (usually) called when the shadowed object is renamed
    // We'll rename the shadow as well if its name hasn't been changed already
    XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpSetShadowTitle");

//  somPrintf( "XShadow:wpSetShadowTitle(\'%s\') current shadow = \'%s\', original=\'%s\', nameModified=%s\n",
//             pszNewTitle, currentShadowTitle, originalTitle, somThis->nameModified?"T":"F" );

    if (!somThis->nameModified) // shadow & object have the same title ?
       // yes - rename the shadow as well (don't need to update nameModified)
       return (XShadow_parent_WPShadow_wpSetShadowTitle(somSelf, pszNewTitle));


    // OK the shadowed object was renamed - we need to check if it's now the same as the shadow!
    // Obtain a pointer to the shadowed object's title.
    WPObject  *shadowedObject = somSelf->wpQueryShadowedObject( FALSE );
    PSZ        originalTitle = (shadowedObject!=NULL)?shadowedObject->wpQueryTitle():NULL;
    PSZ        currentShadowTitle = ((WPObject *)somSelf)->wpQueryTitle();

    // Check if the name is different from the shadow's name

    somThis->nameModified = (originalTitle != NULL) && (currentShadowTitle != NULL) &&
                            (strcmp( originalTitle, currentShadowTitle ) != 0);

    return TRUE;
}

/*
 * Query object title
 */
/*
 * Query objects title
 */

SOM_Scope PSZ  SOMLINK wpQueryTitle(XShadow *somSelf)
{
/*
** This routine calls the WPObject version of wpQueryTitle() to obtain the
** shadow's title.  WPShadows's version returns the title of the shadowed object.
*/
static int check = 0;
PSZ rv="??";

    XShadowData *somThis = XShadowGetData(somSelf);
//  XShadowMethodDebug("XShadow","wpQueryTitle");

    if (check) // I had lots of trouble with this !
       rv =  "wpQueryTitle_recursed";
    else {
       check++;

       if (somThis->WPObject_wpQueryTitle) // have access to WPObject::wpQueryTitle() ?
          rv = ((somTP_WPObject_wpQueryTitle *)somThis->WPObject_wpQueryTitle)( somSelf );
       else
          rv = XShadow_parent_WPShadow_wpQueryTitle(somSelf);

       check--;
       }

//  somPrintf( "XShadow:wpQueryTitle() rv = \'%s\'\n", rv );

    return rv;
}

/*
 * Set Object Style
 */
SOM_Scope BOOL  SOMLINK wpSetStyle(XShadow *somSelf, ULONG ulNewStyle)
{
    XShadowData *somThis = XShadowGetData(somSelf);
    XShadowMethodDebug("XShadow","wpSetStyle");

    somPrintf ( "wpSetStyle(%lX).\n", ulNewStyle );

    return (XShadow_parent_WPShadow_wpSetStyle(somSelf, ulNewStyle));
}

/*
 * Query Object Style
 */

SOM_Scope ULONG  SOMLINK wpQueryStyle(XShadow *somSelf)
{
ULONG rcObject = 0;
ULONG rc = 0;

    XShadowData *somThis = XShadowGetData(somSelf);
    XShadowMethodDebug("XShadow","wpQueryStyle");

//    if (somThis->WPObject_wpQueryStyle != NULL) {
//       rcObject = (((somTP_WPObject_wpQueryStyle *)somThis->WPObject_wpQueryStyle)(somSelf));
//       somPrintf ( "wpQueryStyle() - Calling WPObject_wpQueryStyle()=>%lX\n", rcObject );
//       }

//    rc = (rcObject & OBJSTYLE_LOCKEDINPLACE) | (XShadow_parent_WPShadow_wpQueryStyle(somSelf) &~OBJSTYLE_LOCKEDINPLACE);
//    rc = XShadow_parent_WPShadow_wpQueryStyle(somSelf);

    rcObject = (somThis->lockedInPlace)?OBJSTYLE_LOCKEDINPLACE:0;

    rc = rcObject | (XShadow_parent_WPShadow_wpQueryStyle(somSelf) &~OBJSTYLE_LOCKEDINPLACE);

    somPrintf ( "wpQueryStyle'()=>O=%lX, O|P=%lX).\n", rcObject, rc );

    return ( rc );
}

/*
 * Modify Object Style
 */

SOM_Scope BOOL  SOMLINK wpModifyStyle(XShadow *somSelf, ULONG ulStyleFlags,
                                      ULONG ulStyleMask)
{
    XShadowData *somThis = XShadowGetData(somSelf);
    XShadowMethodDebug("XShadow","wpModifyStyle");
    somPrintf ( "wpModifyStyle(%lX,%lX).\n", ulStyleFlags, ulStyleMask );

    return (XShadow_parent_WPShadow_wpModifyStyle(somSelf, ulStyleFlags, ulStyleMask));
//    return (XShadow_parent_WPShadow_wpModifyStyle(somSelf, ulStyleFlags,
//                                                  ulStyleMask&~OBJSTYLE_LOCKEDINPLACE));
}

//==================================================================================
//  Class Methods and Data
//
//==================================================================================

/*
 * Class init
 */

SOM_Scope void  SOMLINK wpclsInitData(M_XShadow *somSelf)
{
    M_XShadowData *somThis = M_XShadowGetData(somSelf);
//  M_XShadowMethodDebug("M_XShadow","wpclsInitData");

    M_XShadow_parent_M_WPShadow_wpclsInitData(somSelf); // Init parent

    char  szBuffer[CCHMAXPATH];
    ULONG uSize;

    somThis->hResourceModule  = NULLHANDLE;
    somThis->pszHelpPath      = NULL;

    somId myId = SOM_IdFromString("XShadow");

    // get DLL Module path & name
    PSZ   pszModulePathName = SOMClassMgrObject->
                            somLocateClassFile( myId,
                                                XShadow_MajorVersion,
                                                XShadow_MinorVersion);
    SOMFree( myId );

    if ( pszModulePathName == NULL ) {
       M_XShadowMethodDebug("M_XShadow","wpclsInitData - Failed to determine Module");
       /*
       WinMessageBox( HWND_DESKTOP, HWND_DESKTOP,
                      "Failed to determine Resource path",
                      "Class Initialisation Error",
                      0,
                      MB_OK | MB_ERROR | MB_MOVEABLE );
       */
       return;
       }

    DosQueryModuleHandle( pszModulePathName, &somThis->hResourceModule );

    if (somThis->hResourceModule == NULLHANDLE) {
       M_XShadowMethodDebug("M_XShadow","wpclsInitData - Failed resource module load");
       /*
       WinMessageBox( HWND_DESKTOP, HWND_DESKTOP,
                      "Failed to local Resource Module",
                      "Class Initialisation Error",
                      0,
                      MB_OK | MB_ERROR | MB_MOVEABLE );
       */
       return;
       }

    uSize = WinLoadString( HWND_DESKTOP, somThis->hResourceModule,
                                 ID_HELPPATH, CCHMAXPATH, szBuffer);
    if (uSize != 0)  {
       szBuffer[CCHMAXPATH-1] = '\0'; // in case too long for buffer
       somThis->pszHelpPath = SOMstrdup(szBuffer);
       }
}

/*
 * Class de-init
 */
SOM_Scope void  SOMLINK wpclsUnInitData(M_XShadow *somSelf)
{
    M_XShadowData *somThis = M_XShadowGetData(somSelf);
//    M_XShadowMethodDebug("M_XShadow","wpclsUnInitData");

   if (somThis->pszHelpPath != NULL)      SOMFree( somThis->pszHelpPath );

   M_XShadow_parent_M_WPShadow_wpclsUnInitData(somSelf);
}

/*
 * Resource Module handle
 */
SOM_Scope HMODULE  SOMLINK clsGetResourceModule(M_XShadow * somSelf)
{
    M_XShadowData *somThis = M_XShadowGetData(somSelf);
//  M_XShadowMethodDebug("M_XShadow","clsGetResourceModule");

    return somThis->hResourceModule;
}

/*
 * Name of Help File
 */
/*
 * Name of Help File
 *  attribute HMODULE  hmodResource; //# Resource module handle for XShadow
 */

SOM_Scope PSZ  SOMLINK getHelpPath(M_XShadow *somSelf)
{
    M_XShadowData *somThis = M_XShadowGetData(somSelf);
//  M_XShadowMethodDebug("M_XShadow","getHelpPath");

    return somThis->pszHelpPath;
}

/*
 * Get Class default Style
 */
/*
 * Get Class default Style
 *    wpclsQueryTitle       : override;    // Get Class Title
 */

SOM_Scope ULONG  SOMLINK wpclsQueryStyle(M_XShadow *somSelf)
{
    /* M_XShadowData *somThis = M_XShadowGetData(somSelf); */
//  M_XShadowMethodDebug("M_XShadow","wpclsQueryStyle");

    return M_XShadow_parent_M_WPShadow_wpclsQueryStyle(somSelf)
           & (ULONG)~CLSSTYLE_NEVERTEMPLATE; // can create template

}

/*
 * Get Class Default Help
 */
SOM_Scope BOOL  SOMLINK wpclsQueryDefaultHelp(M_XShadow *somSelf,
                                              PULONG pHelpPanelId,
                                              PSZ pszHelpLibrary)
{
    M_XShadowData *somThis = M_XShadowGetData(somSelf);
//  M_XShadowMethodDebug("M_XShadow","wpclsQueryDefaultHelp");

    if (pHelpPanelId)    /* Set the default help panel ID */
      *pHelpPanelId = HLP_ABOUTAUTHOR;

    if (pszHelpLibrary)  /* Copy the help file name */
      strcpy( pszHelpLibrary, somThis->pszHelpPath );

    return (TRUE);

//    return (M_XShadow_parent_M_WPShadow_wpclsQueryDefaultHelp(somSelf,
//                                                              pHelpPanelId,
//                                                              pszHelpLibrary));
}

/*
 * So we can control templates
 *    wpclsQueryDefaultView: override;
 *    wpclsQueryIcon:        override;
 */

SOM_Scope BOOL  SOMLINK wpclsCreateDefaultTemplates(M_XShadow * /*somSelf*/,
                                                    WPObject* /*somSelf*/)
{
    /* M_XShadowData *somThis = M_XShadowGetData(somSelf); */
//  M_XShadowMethodDebug("M_XShadow","wpclsCreateDefaultTemplates");

    return TRUE;      // causes template to *not* be created in templates folder.

//  return (M_XShadow_parent_M_WPShadow_wpclsCreateDefaultTemplates(somSelf, Folder));
}
